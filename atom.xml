<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曹艺瀚的个人网站</title>
  
  
  <link href="https://caoyihan.com/atom.xml" rel="self"/>
  
  <link href="https://caoyihan.com/"/>
  <updated>2024-10-08T19:40:41.914Z</updated>
  <id>https://caoyihan.com/</id>
  
  <author>
    <name>August曹艺瀚</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文摘-24年10月</title>
    <link href="https://caoyihan.com/2024/10/08/Digest-24-10/"/>
    <id>https://caoyihan.com/2024/10/08/Digest-24-10/</id>
    <published>2024-10-08T07:40:41.000Z</published>
    <updated>2024-10-08T19:40:41.914Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hayami.typlog.io/mla">只有散步我們才真正聊天｜hayami’s blog</a></p><blockquote><p>「我听过一个说法。如果把现代爱情比作垒的话，<strong>一垒是做爱，二垒是分享原生家庭创伤，三垒是一起逛菜场</strong>。」</p><p>「呃，一垒之后要过很久才到二垒吧。」</p><p>「不是啊，二垒不是无缝紧接一垒的吗？」</p><p>「对喔。我一直很向往三垒，但好难喔。」</p><p>「这就是都市快餐爱情嘛。快乐唾手可得，真心难觅。」 我又想了想说，「如果她是因为你分享了原生家庭创伤而爱上你，可能是因为…..<strong>.坦诚所具备的能量是巨大的。</strong>」</p></blockquote><blockquote><p>《偶然与想象》里的第一个短篇，讲的就是这个故事。</p><blockquote><p>我觉得 他也正触摸着 我内心的深处，这听起来……好色</p><p>不会吧，老实说 我也觉得很色，我都不知道原来谈话可以这么色</p></blockquote></blockquote><blockquote><p>过度的交流会诱发性欲。因为坦诚所具备的能量是无限巨大的，<strong>没有人能够完全承受另一个人的自我剖析</strong>， 更别提毫无保留地剖析自我。两个人当中总有一方会率先承受不住这种赤裸所带来的不安，这时候人们下意识地就会开始做爱。以及，在倾听的过程中，<strong>总会有那么一个瞬间会让人分不清是心疼还是心动。就是这个瞬间，这就是产生性欲的瞬间。</strong></p></blockquote><blockquote></blockquote><p><a href="https://lexfridman.com/pieter-levels-transcript#chapter17_best_ide_for_programming">《Transcript for Pieter Levels: Programming, Viral AI Startups, and Digital Nomad Life | Lex Fridman Podcast #440》</a></p><blockquote><p><strong>Lex Fridman 勒克斯·弗里德曼</strong><a href="https://youtube.com/watch?v=oFtjKbXKqbg&t=12448">(03:27:28)</a> You should understand their methods, and then move past it. Find yourself, find your own voice, find your own-<br>(03:27:28) 你应该理解他们的方法，然后超越它。找到你自己，找到你自己的声音，找到你自己的——</p><p><strong>Pieter Levels 皮埃尔·勒夫尔斯</strong><a href="https://youtube.com/watch?v=oFtjKbXKqbg&t=12454">(03:27:34)</a> Yeah, you imitate, and then you put your own spin to it. And that’s like creative process. That’s literally the whole… Everybody always builds on the previous work. You shouldn’t get stuck.<br>(03:27:34) 是的，你先模仿，然后加入自己的风格。这就是创作过程。这其实就是全部……每个人都是在前人的基础上进行创作的。你不应该停滞不前。</p></blockquote><p>其实emails这一整段都很有意思。先模仿，然后加入自己的风格，找到自己的声音。</p><blockquote><p>Man, I recommend if you’re 18, you get out of high school, do this, go travel and build some internet stuff, whatever. Bring your laptop and it’s an amazing experience. Five years ago, I’d still go to university, but now I’m thinking like, “No, maybe skip university.” Just go first, travel around a little bit, figure some stuff out. You can go back to university when you’re 25. You can like, “Okay, now I learned to be successful in business.” You have money. At least now, you can choose what you really want to study. Because people at 18, they go study what’s probably good for the job market. Right? So it probably makes more sense. If you want that, go travel, build some businesses and go back to university if you want.<br>（03:19:12）兄弟，我建议如果你 18 岁，就离开高中，去做这件事，去旅行，做一些互联网上的事情，随便什么。带上你的笔记本电脑，那将是一次美妙的经历。五年前，我还会去上大学，但现在我在想，“不，也许可以跳过大学。”先去旅行，四处走走，弄清楚一些事情。你可以在 25 岁的时候再回到大学。你可以说，“好吧，现在我学会了如何在商业上成功。”你有钱了。至少现在，你可以选择你真正想学的东西。因为 18 岁的人，他们去学习可能对就业市场有好处的东西。对吧？所以这样做可能更有意义。如果你想要那样，就去旅行，做一些生意，如果你愿意，再去上大学。<br>Lex Fridman 勒克斯·弗里德曼<br>(03:19:49) So one of the biggest uses of a university is the networking. You gain friends, you meet people. It’s a forcing function to meet people. But if you can meet people out into the world by travel-<br>(03:19:49) 所以，大学最大的用途之一就是建立人脉。你结交朋友，认识新人。这是一种迫使你去认识人的方式。但如果你能通过旅行在世界各地结识人呢——</p></blockquote><p>边缘人群会更有趣。要逼迫自己尽可能多地meet people。搭建人脉。</p><p>偶然读到一些跨性别群体写的文章。发现有些问题或观点就可以识别出是不是跨性别者，比如是否认为「男生和女生没有本质差异」，对「男女生可以有纯友谊吗」的看法。</p><p>（之前几次看到「男女之间有纯友谊吗？」这个问题，但从来没想到这跟自身的性别认同有关~</p><blockquote><p>男性的外貌风格变化更少，以至于任何超出这种变化的东西都会格外突出。如果稍微偏离，人们就会说些什么。</p></blockquote><p>实际上，男生也可以尝试更多的外貌。</p><p>作者也发现，转换性别之后，发现谈论自己的情感变得容易多了。</p><p><a href="https://lili.bearblog.dev/what-i-like-about-being-a-woman/">https://lili.bearblog.dev/what-i-like-about-being-a-woman/</a></p><p>Touch-It-Once 工作法：不要重复处理同一张纸。比如只需阅读每封电子邮件1次，然后选择——删除他&#x2F;回复他&#x2F;推迟他（放到一个需要长期处理的文件夹）&#x2F;委托他&#x2F;执行他。</p><p>我在大学里得到的最好建议是：“找到最好的老师，上他们所有的课，不管是什么课。” 这个建议也适用于互联网。 – David Perell</p><p>（我不确定这个观点是否正确，挺怀疑的。）</p><blockquote><p>以前一直无法理解工作狂所谓的「成就感」，很多事没有我其他人也能干，我有什么值得“自豪”的呢？</p><p>这几天想到，“对外输出可以产生最高等级的幸福”，我可以被替代，但感受这份幸福的就是别人了。对绝大多数永远只作为消费者刷短视频、玩游戏、听音乐、逛街吃饭看电影的普通人来说，工作是少有的对外输出、发挥创造力的机会。</p></blockquote><p>——<a href="https://mazzzystar.github.io/thoughts/">https://mazzzystar.github.io/thoughts/</a></p><p>——2024.10.5</p><blockquote><p> “潜力股”、“上进心”也是一种对男性的物化。</p></blockquote><p>——<a href="https://mazzzystar.github.io/thoughts/">https://mazzzystar.github.io/thoughts/</a></p><p>——2024.10.5</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://hayami.typlog.io/mla&quot;&gt;只有散步我們才真正聊天｜hayami’s blog&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「我听过一个说法。如果把现代爱情比作垒的话，&lt;strong&gt;一垒是做爱，二垒是分享原生家庭创伤，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Make a wish to the universe.</title>
    <link href="https://caoyihan.com/2024/10/07/Make-a-wish-to-the-universe%EF%BC%88en%EF%BC%89/"/>
    <id>https://caoyihan.com/2024/10/07/Make-a-wish-to-the-universe%EF%BC%88en%EF%BC%89/</id>
    <published>2024-10-08T02:08:57.000Z</published>
    <updated>2024-10-08T14:08:57.212Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://hayami.typlog.io/hoshi">“Make a casual wish to the universe, and someone will help you earnestly fulfill it!”</a></strong></p><p>Author Hayami reflects on the possible “big tech company syndrome” within herself. In reality, many things are not as complicated as they seem. Often, simply taking action can quickly solve problems, and it’s best to use the simplest methods possible. Seeking help from those around you is not shameful.</p><p>1. </p><blockquote><p>The girl said, “First, you need to enjoy yourself, and then you’ll attract people with the same energy. When you’re happy, good things will naturally follow, and money will come eventually.”</p><p>“How did you meet x?” — “They reached out when they were doing their RV media project. The RV thing didn’t work out, but we got to know each other.” “How did you find sponsors?” — “Oh, how? Just posting on social media is enough.”</p><p>I asked a few more questions. I realized that when I ask, I’m always very cautious and hesitant because some things seem incredible and difficult to me. But when she answers, it’s always matter-of-fact and straightforward, like “Oh, isn’t it just like this or that?” She said, “Make a wish to the universe. Just as some people will pay for your sandwich, some will support your ideas.”</p></blockquote><p>2. </p><blockquote><p>The washing machine at the Mosuo People’s Museum broke down.</p><p>The girl suddenly said, “Oh! Let’s crowdfund a washing machine.”</p><p>Without seeking opinions from those around her, she quickly drafted a message, created a group chat, and posted on her social media, simultaneously sharing it in the museum’s community:</p><blockquote><p>Crowdfunding a washing machine for the Mosuo People’s Museum ▪️Target amount: 1500 ▪️Donate as you wish Will be donated to the Mosuo Museum in everyone’s name Will publish the entire donation process You can send it directly to me Thank you all Please share Love you~</p></blockquote><p>Within ten minutes, 30 people gathered in the group, each transferring 100 or 200 yuan. They quickly exceeded the donation target. Originally, they only needed 1000 yuan, but in just one short afternoon, they raised 4000, and the amount was still increasing. After posting, the girl was very confident that they would raise the money. She told someone nearby, “Great! You’re in charge of buying the washing machine, I’ll transfer the money to you.” Then she went to work by Lugu Lake, not particularly worried about it.</p></blockquote><p>3. </p><blockquote><p>I suddenly realized, this is also a kind of “big tech company syndrome”!</p><p>In a big tech company, to do something, you need to go through long-term value justification, multi-party involvement, extensive lobbying, designing a perfect plan, and breaking down the workload meticulously. Only when everything is ready and all aspects considered can you proceed. Furthermore, if such elaborate efforts are required for a small task, people can easily be alienated into machines without independent consciousness. It’s like living in a society full of fatigue; even if you realize something is wrong, you just accept it passively. Negative, passive, listless.</p><p>Sometimes I feel like it’s becoming harder for me to send out signals and change the energy around me. Cynically shrinking into my shell, losing confidence and interest in actively influencing my surroundings. But after countless “Oh, you can do it like that?” moments of realization, I feel the need to make some changes. Make a casual wish to the universe, and let others help you fulfill it earnestly!</p></blockquote><p>Some things may seem difficult, but when you actually do them, you’ll find they’re easier than imagined.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://hayami.typlog.io/hoshi&quot;&gt;“Make a casual wish to the universe, and someone will help you earnestly fulfill it!”&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>向宇宙许个愿吧</title>
    <link href="https://caoyihan.com/2024/10/07/Make-a-wish-to-the-universe%EF%BC%88zh-cn%EF%BC%89/"/>
    <id>https://caoyihan.com/2024/10/07/Make-a-wish-to-the-universe%EF%BC%88zh-cn%EF%BC%89/</id>
    <published>2024-10-08T02:08:40.000Z</published>
    <updated>2024-10-08T14:08:40.046Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://hayami.typlog.io/hoshi">《向宇宙随便许个愿吧，会有人帮你认真实现的！》</a></strong></p><p>作者 Hayami 反思自己身上可能存在的大厂病。 事实上很多事情不用那么麻烦，只要去做了就能很快解决，而且可以尽可能使用简单的方法。向周边人求助也不是可耻的。</p><ol><li></li></ol><blockquote><p>女生说，首先要自己玩得开心，然后吸引相同磁场的人。人只要开心了，好事情就会接踵而来，钱也是迟早的事情。</p><p>「x是怎么认识的呢？」 ——「之前他们做房车自媒体的时候找上门的，后来房车没搞，反而认识了。」 「sponsor是怎么找到的呢？」 ——「啊，怎么找的？就发个朋友圈就好啦。」</p><p>我又问了一些问题。我发现我在提问的时候都会特别小心翼翼、斟酌再三，因为有些事情在我看来是不可思议、很困难的；但她回答的时候就特别理所当然、简洁明了，类似于「啊，不就这样那样吗」的感觉。「向宇宙许愿嘛」，她说「就像有的人会为三明治买单，也会有人会为了你的理念买单。」</p></blockquote><ol start="2"><li></li></ol><p>摩梭人博物馆的洗衣机坏了。</p><blockquote><p>女生突然说「哎呀！我们众筹一台洗衣机吧。」</p><p>她没有征集周围人的意见，而是迅速编辑文案、建了个群、发了一条朋友圈，同时转发在博物馆的社群里：</p><blockquote><p>摩梭人博物馆众筹一台洗衣机 ▪️目标金额：1500 ▪️捐助随喜 会以大家的名义捐给摩梭博物馆 会公布整个捐助流程 可以直接给我 感谢大家 多多转发 爱你们～</p></blockquote><p>在十分钟内，群里聚集了30个人，每个人100、200转钱，很快就超过了捐助的金额。本来只需要1000块钱，短短一下午筹到了4000，并且这个金额还在继续。女生在发布之后，就非常有信心肯定能筹到钱。她和旁边人说，「好！接下来你负责买洗衣机，我转你钱。」就跑去泸沽湖旁边办公了，也没有特别放在心上。</p></blockquote><ol start="3"><li></li></ol><blockquote><p>我突然意识到，这也是一种「大厂病」啊！</p><p>如果在大厂做一件事情，要经过长期的价值论证、多方牵扯、四方游说，把方案设计得非常完美、把工作量拆分得非常细致。万事俱备、考虑周全，才可以继续推进下去。进一步，如果推进一件小事就如此大费周章，人就很容易被异化成失去自主意识的机器。像是生活在一个充满倦怠的社会，即使意识到不对，也就逆来顺受了。消极、被动、无精打采。</p><p>我有时候觉得自己，好像越来越难发出信号、改变周围的磁场了。犬儒地缩在自己的壳子里，对周围环境失去发挥主观能动性的信心和兴趣。但在无数个「还能这样啊」的冲击里，我觉得需要做出一些改变。向宇宙随随便便许个愿，然后让别人认认真真帮你实现吧！</p></blockquote><p>有些事情看起来很难，但实际做起来就会发现，比想象中容易。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://hayami.typlog.io/hoshi&quot;&gt;《向宇宙随便许个愿吧，会有人帮你认真实现的！》&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;作者 Hayami 反思自己身上可能存在的大厂病。 事实上很多事情不用那么麻烦，只要去做</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>电子书和纸质书对阅读理解的影响</title>
    <link href="https://caoyihan.com/2024/09/28/reading-and-channels/"/>
    <id>https://caoyihan.com/2024/09/28/reading-and-channels/</id>
    <published>2024-09-28T15:09:06.000Z</published>
    <updated>2024-09-29T03:09:06.917Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://clikmedia.ca/LMM/sites/default/files/pdf/mangen_2012_lecture_sur_ecran_lecture_papier_comprehension.pdf">Reading linear texts on paper versus computer screen: Effects on reading comprehension</a>:</p><p>超文本结构往往会增加决策和视觉处理的认知需求，而这种额外的认知负荷反过来又会损害阅读理解能力。</p><p>与纸张相比，阅读和使用计算机会导致更高的认知工作量</p><p>计算机屏幕的特性（刷新率、高对比度和波动亮度）会干扰长期记忆的认知处理.</p><p>我自己的体验是，在屏幕上阅读更容易浮光掠影，更难深度阅读。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://clikmedia.ca/LMM/sites/default/files/pdf/mangen_2012_lecture_sur_ecran_lecture_papier_comprehension.pdf&quot;&gt;Reading linear </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>对时间的感知</title>
    <link href="https://caoyihan.com/2024/09/28/Perceived-Age/"/>
    <id>https://caoyihan.com/2024/09/28/Perceived-Age/</id>
    <published>2024-09-28T14:59:52.000Z</published>
    <updated>2024-09-29T02:59:52.253Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://suryad.com/blog/percieved-age/">Perceived Age</a><br>Different people have different perceptions of time.<br>A study asked different age groups to mentally count 120 seconds. People under 30 averaged 115 seconds; those over 50 just 87 seconds. That’s a 24% reduction in perceived time. This shift in perception isn’t just random; it’s rooted in the complex interplay of our brain’s neurotransmitters, primarily dopamine.</p><p>When I count to 120 seconds, it actually takes 96 seconds.  This means I perceive time like a middle-aged person.</p><p>Adjusted for the subjective increase in how fast time passes, life is half over by 23 or 24. So Don’t waste time.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://suryad.com/blog/percieved-age/&quot;&gt;Perceived Age&lt;/a&gt;&lt;br&gt;Different people have different perceptions of time.&lt;br&gt;A study ask</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>文摘-24年9月</title>
    <link href="https://caoyihan.com/2024/09/26/Digest-24-9/"/>
    <id>https://caoyihan.com/2024/09/26/Digest-24-9/</id>
    <published>2024-09-26T05:42:43.000Z</published>
    <updated>2024-10-01T03:33:14.075Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2018年我入职前司，Leader让我做手机端语音合成。当时隔壁部门也在做语音合成，但不是跑在手机端，服务跑在GPU上，对外提供接口，由一个在小米工作多年的语音合成专家坐镇。</p><p>很快我发现，自己训练了几天的模型，生成结果人声的自然度和质量，竟然完全碾压他们的接口效果。倒不是我厉害，而是我用了当时最新paper和模型(WaveNet&#x2F;Tacotron-2)，而根据他们后来的技术分享，还是传统声学模型、语言模型、CTC特征那一套。</p><p>我的感受不是窃喜，而是强烈的危机感：对算法工程师而言，深度学习好像没有壁垒可言？你在任何一个子领域多年积攒的经验，可能抵不过一个实习生用最新paper的模型效果。</p><p>但是，绝大部分公司会高薪雇佣这种资深专家来负责项目，他们通常会把自己在前司的陈旧技术在这里重新施展一遍，但其实已经远远落后了。这事也在某种程度破除了我对专家的迷信，没有贬低的意思，古人说＂学如逆水行舟＂，现实好像更残酷。</p></blockquote><p>特别值得引起警惕！</p><blockquote><p>我觉得有这么强大的一个老师，为什么不先用它来找到你的极限呢？我想法可能比较搞笑，我觉得创业什么的都已经不是很重要了，用它实现你活着的价值（创造、认知和 表达）会更吸引人。就有点像，通天塔被造出来了，我的第一反应是拾级而上，去看更大的风景，而不是想着如何给塔修门做窗户。</p></blockquote><p>这条真心觉得有道理！</p><blockquote><p>最近半年，我做了几个产品。第一个上线时，我很激动，每隔一小时都会去App Store刷新看有没有人下载。因为实在太小众，几乎每天都是0，逐渐没那么兴奋了。</p><p>后来，有了新产品，又很激动，觉得它会改变世界。那阵子，我每天醒来就打开手机看昨晚的版本审核结果。</p><p>期间，有朋友跟我说，产品商标被人注册了，改个名吧。给我讲他和商标贩子的血泪斗争史，我才知道原来有那么有恶意的人。那阵子还被抄袭，我很愤怒，但也没办法。</p><p>我发现我停下来了。一旦停下，我就会注意到被抄袭、被攻击、被下架的可能性，就会频繁看数据，思考收入和生存，产生很多我并不喜欢的情绪。</p><p>我试着改变，很快速地做新东西，完成了就做下一个。这种感觉很棒——每当自己沉浸在新idea里，我就会忘乎所以，前天甚至半夜三点爬起来更新4个版本到早晨七点。</p><p>商标、抄袭、数据、收入…它们变得模糊，离我远去了。</p><p>看过一句话：“要创造，一旦停止创造，你就只剩下品味，而品味会让你排斥他人、变得狭隘”。“创造”的门槛太高了，我不敢说自己是在创造，换成“体验”更合适——不断有新体验，才不会陷在旧情绪。</p><p>我像是被拧上了发条，只能不停地折腾点什么来吸引自己的注意。“跑起来就会有风”，我可能一直在追风。</p></blockquote><p><a href="https://mazzzystar.github.io/thoughts/">https://mazzzystar.github.io/thoughts/</a></p><p>2024.9.30</p><blockquote><p>并不是所有网站都有收费的勇气&#x2F;价值，但是由于存在维护成本，网站需要源源不断收入，特别是流量大了之后。</p></blockquote><blockquote><p>纯粹的捐赠，在付完钱之后捐赠者什么都得不到，这是人们不愿意捐赠的原因。所以，这个工具旨在给那些＂不好意思收费＂的网站，提供一个显示捐赠者头像，以及一句话附带留言。这些内容会被所有网站使用者看到。</p></blockquote><p>之前看到有个游戏主播：红警HBK08，喜欢在视频开头播报充电的粉丝。也是在给粉丝创造价值。</p><blockquote><p>一旦远离了这片土地，你对这里的气味、知识和经验就会瞬间冻结，慢慢地，你对「整个社会在关心什么」变得越来越没有“体感”。你开始做自媒体，讲述你对这里的看法，这些内容起初很击中人心，因为你不仅很懂你的受众关心什么，你还敢讲出来。但逐渐，过往的经验像火车一样呼啸远去了，冻结的知识库让你的叙事不可避免地走向空洞，你开始像吸血鬼一样，把仍在这里的人事物当做养分，试图去关心、解构当下的议题，然后在某一两句漏出马脚， 但已无力回天。这时，你的内容甚至不如土味视频更击中人心。</p></blockquote><p>这个作者还提出了一个很奇怪的观点：「ProductHunt早该死透了。」我不确定</p><p>——<a href="https://mazzzystar.github.io/thoughts/">https://mazzzystar.github.io/thoughts/</a></p><p>——2024.9.29</p><p><a href="https://iamyourboon.com/cmu-export/">《CMU’s Greatest Export is Jane Street》</a><br>作者发现，CMU（卡内基梅隆大学）人才的主要输出不是「创业精神」。作者发现，最有创业精神的是商科学生和MBA，而不是工程师们。</p><blockquote><p>Entreprenshuip at CMU is an unserious endeavor; ideas are silly, efforts are weak. The resources, network, and staying power is not there.</p></blockquote><p><a href="https://herman.bearblog.dev/turning-30/">《30 thoughts on turning 30》</a><br>「庆祝小事！」庆祝小事是一种感恩的表达，会改变你对生活的心态！</p><p>或许我们低估了视频的乐趣和成瘾性。</p><p>——<a href="https://tarunreddy.bearblog.dev/addict/">https://tarunreddy.bearblog.dev/addict/</a></p><p>——2024.9.27</p><p><a href="https://erikbern.com/2024/09/27/its-hard-to-write-code-for-humans.html">《It’s hard to write code for computers, but it’s even harder to write code for humans》</a></p><p>这篇文章作者主要谈论的事，编写与人交互的代码，也就是「面向开发者的代码」，比如各种框架、库、API、SDK、DSL、嵌入式 DSL或编程语言。</p><p><strong>文档的「Getting started」 也是产品的一部分。</strong>作者认为，值得重组整个产品以实现快速入门。摆脱强制配置。让设置 API 令牌变得异常简单。消除所有摩擦。使用户能够在几分钟内在他们的笔记本电脑上使用您的产品。</p><blockquote><p>目前有 7,000,000,000 个开发工具。用户没有太多的精力或耐心去深入了解 LRU 缓存 NPM 包或其他东西的不同之处。</p></blockquote><p><strong>Humans learn from examples, not from “core concepts”.人们从例子中学习，而不是「核心概念」。</strong></p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Too many programming books and tutorials are like “let’s build a house starting from scratch, brick by brick” when what I want to “here is a functioning house, let’s learn about it by changing something and then seeing what happens”</p>— Chris Albon (@chrisalbon) <a href="https://twitter.com/chrisalbon/status/1831497223076770217?ref_src=twsrc%5Etfw">September 5, 2024</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>作者建议：不要写一个很长的「核心概念」编年史，相反，把十几个例子放在一起，这样的好处是：</p><ol><li>人们可以查看例子，并了解工具是如何工作的。这就是人类的学习方式。</li><li>抱着问题的人会寻找一个足够近的起点，潜在的起点越多，就越可能接近想要的东西。</li></ol><blockquote><p>A succinct list: 一个简洁的清单：</p><ol><li>Developers getting to success faster are happy developers. They will like your tool.<br>更快取得成功的开发人员是快乐的开发人员。他们会喜欢你的工具。</li><li>Developers banging their heads against errors are sad developers. They will blame your tool.<br>为错误而拼命的开发者是可悲的开发者。他们会责怪你的工具。</li></ol></blockquote><p><strong>避免概念超载</strong></p><p>使用工具前，每需要了解的一个新概念都是阻碍。如果只有只有2~3个新概念，问题不大，但没有人会费心去学8个新概念。<br><br><br><br></p><p>I tried to get romantically involved with two girls in the last three months, and I remembered why I don’t try to get involved even as friends, let alone romantically… People have become so superficial and uncultured that they simply can’t understand what is good and what is bad, just as they can’t have a dialogue to solve the problems you&#x2F;you are having and&#x2F;or want to try to take&#x2F;use&#x2F;spend your money, as if you were the provider of that person.</p><p>——<a href="https://yuricunha.bearblog.dev/reflections-on-solitude-and-superficiality/">https://yuricunha.bearblog.dev/reflections-on-solitude-and-superficiality/</a><br>——2024.9.26<br><br><br><br></p><p><strong>Dorieee:</strong></p><p>好多即友给我评论的时候我会觉得他们真的好宝藏，<br>但一打开主页，他们并没有分享自己这些宝藏的部分，而是不怎么发动态或者只是基础记录生活——运动了，吃饭了，购物了。和给我评论时的状态完全不同。</p><p>每每遇到会有点可惜，感觉错过了一个很棒的人呢！</p><p>相比之下我真的很喜欢没事哔哔。(&#x2F;&#x2F;∇&#x2F;&#x2F;)</p><p>希望大家多写作，这样我就可以光速交朋友哈哈哈哈。✍️(◔◡◔)</p><p>——<a href="https://web.okjike.com/originalPost/66e1e018acacaa27665e15a6">https://web.okjike.com/originalPost/66e1e018acacaa27665e15a6</a></p><p>——2024.9.26<br><br><br><br></p><p>写作是思维的运动。</p><p>——<a href="https://birming.com/write-not-write/">https://birming.com/write-not-write/</a></p><p>——2024.9.26<br><br><br><br></p><p><a href="https://laike9m.com/blog/people-die-but-long-live-github,122/">People Die, but Long Live GitHub</a></p><p>如果你希望存储一段信息，让 100 年后的人也能访问，要怎么做？</p><p>作者提出，Github 是能唯一胜任的工具。  </p><br><br><p><a href="https://world.hey.com/dhh/dare-to-connect-a-server-to-the-internet-01d25a07">https://world.hey.com/dhh/dare-to-connect-a-server-to-the-internet-01d25a07</a></p><blockquote><p>The merchants of complexity thrive when they can scare you into believing that even the simplest things are too dangerous to even attempt by yourself these days. That without their rarified expertise, you’ll be left vulnerable. So best just to leave ever-more of your burdens to them, and they’ll happily carry (for a fee!). Don’t listen, don’t succumb. You need less help than you think, and it’s not as scary as they’d have you believe.</p></blockquote><p>会有很多人告诉你，某件事情太难太危险了，以至于最好不要尝试。所以最好把任务留给他们（当然是收费的！其实很多是公司销售人员）。</p><p>不要听从！不要屈服！你需要的帮助比你想象的要少，尝试之后就会发现，根本没有他们说的那样可怕。</p><p>作者在原文给的建议是，敢于使用Docker容器和云服务器，而不是使用各种看似简单的服务。  </p><br><br><p><a href="https://en.wikipedia.org/wiki/Roe_v._Wade">Roe v. Wade</a>  罗伊诉韦德案</p><p>罗伊诉韦德案（Roe v. Wade）是美国最高法院的一个具有里程碑意义的案件，于1973年做出裁决，其中法院裁定美国宪法普遍保护堕胎权。</p><p>但在2022年6月24日，美国最高法院在Dobbs v. Jackson Women’s Health Organization案中推翻了罗伊诉韦德案的裁决。  </p><br><br><p> <a href="https://waitbutwhy.com/2014/02/pick-life-partner.html">How to Pick Your Life Partner – Part 1</a></p><blockquote><p>当你选择人生伴侣时，你也在选择很多东西，包括你的养育伴侣和对你孩子影响深远的人、你约20,000顿饭的饭搭子、你约100个假期的旅行伴侣、你的主要休闲时间退休朋友，你的职业治疗师，以及你会听到大约 18,000 次他的日常的人。</p></blockquote><p>作者问：「既然这是生命中<em>迄今为止</em>最重要的事情，那么为什么有<em>这么</em>多优秀、聪明、逻辑性强的人最终选择了一种让他们不满意和不快乐的生活伴侣呢？」</p><blockquote><p><strong>社会全都错了，给了我们糟糕的建议</strong></p></blockquote><p><strong>社会鼓励我们保持未受教育的状态，让浪漫成为我们的向导。</strong></p><p>传统认为，如果在经营一家企业，应该认真学习商业，制定深思熟虑的商业计划，勤奋分析企业业绩。但如果为了选择生活伴侣，而制定详细的行动计划，并在电子表格中组织进展，那么他们就是怪人了。社会不鼓励考虑太多，不赞成做严密的分析，而是选择诸如命运，直觉等事情。这是不理性的。</p><p><strong>社会对我们明智地扩大对潜在合作伙伴的寻找感到耻辱。</strong></p><p>人们最终会从他们拥有的所有选项中进行选择。作者的结论是：每个寻找生活伴侣的人都应该进行大量的在线约会、快速约会和其他旨在以智能方式扩大候选人库的系统。并且不应以在网上在配偶为耻。总而言之，应该大幅扩大可选范围。</p><p><strong>社会催促我们。</strong></p><p>单身比不幸福的婚姻其实更好。</p><p>一个误区是，有些人更关心生活伴侣的on-paper description（纸面描述），为此她需要检查一堆标准化测试——例如身高、体重、title、财富、成就，等等，而忽略了内在的个性。</p><p>每个人都有一些想要检查的项目。但是务必考虑与生活伴侣的联系质量。只要怀疑一个人被选中，更多是因为他们满足了某些选项，而非个性，他们就是标准化男友&#x2F;女友，而非个性化的。  </p><br><br><p><a href="https://jedi.org/blog/archives/004659.html#entry">為什麼是「妳」？</a></p><blockquote><p>雖然我自己，在生理上，是不折不扣的男性，但是從小到大我卻很少能真正認同多數男性同儕的觀點或想法⸺當然我不是說完全不認同，而是總覺得有點格格不入，在某些習慣、興趣嗜好、批判、價值觀等，覺得不能苟同許多男性的一相情願；反倒是跟女孩子相處的時候自在得多，也因此有為數不少的手帕交。同樣地，就我能認知到的範圍來說，能夠理解我（或者祇是「比較不會誤會我」）的女孩子，也比男孩子要來得多。</p><p>就因為這樣的原因及成長過程，所以我在公開書寫時，總會抱著「這是要寫給女孩子們看的東西」的心態。是啊，我很自私地以為會仔細閱讀我的文字的女生會比男生多；我坦承這是我一己之偏見，所以我私自為之，卻從來沒有鼓吹其他人也該比較辦理。（這實在是廢話連篇，我哪有甚麼權力要別人比照辦理嘛）</p></blockquote><p><strong>人人皆具兩性特質</strong>。</p><blockquote><p>上述的原因祇是初步的動機，接下來我變本加厲地把女部的「妳」當作非指稱特定性別的第二人稱代名詞用。我想跳過連我自己都不清楚的社會學論述，直接說說我的想法。基本上我相信人人皆有雙性戀的潛質，表現於外的性向其實祇是剛好都是某一個性別的人的特質吸引著妳罷了；同樣地我也認為，<strong>人人皆具兩性特質</strong>。其中男性特質因陽剛外顯而容易被注意到，反之女性特質的部分陰柔潛沈，也許連本人都沒能發掘出來。</p><p>女性主義社會學家 Donna Haraway 曾在她的著作《 <a href="http://www.amazon.com/exec/obidos/tg/detail/-/0415903874/">Simians, Cyborgs and Women: The Reinvention of Nature</a> 》裏提出了著名的 <a href="http://www.stanford.edu/dept/HPS/Haraway/CyborgManifesto.html">Cyborg 宣言</a>， Cyborg 正在衝擊著傳統「人」的認知⸺「人」與「非人」的界線正在模糊，我們正在演化，成為更龐大的有機混合體。而在這個過程中，機械、其他生物、乃至於女人，都已逐漸成為我們自身所不可分割的一部份。</p><p>扯遠了，總之再一次地，基於這個自私的理由，所以我用了女部的「妳」，期盼所有讀者（不分性別）的內在女性特質能被喚醒。這並不是為了甚麼兩性平等的理由，而是在<strong>實踐我所認知的 Cyborg</strong> 。</p><p>雖然我如此偏頗地做了上述的決定，但是並不意味著我有多麼蠻橫專制；我所翻譯的文件也好、程式也好，工作用的源檔都是公開給任何人下載的。這些檔案多半是純文字格式的東西，任何人如果不滿我的用字遣詞，大可逕自下載這些檔案，然後用任何純文字編輯器內建的「全域代換」功能，瞬間把用語變更成自己的習慣。</p><p>翻譯或寫作，本來就是一種詮釋世界的手段，更是在實踐自身價值觀的行為。有的人看不懂原文就胡亂編湊，也有人是字字句句斤斤計較；我很歡迎人們來指點我更好的譯法，但是在「妳」這一點上，且允許我如此抉擇，做為個人意志的延伸、如浮水印般嵌入我的作品裏吧。（畢竟，我也沒有阻止任何人拿掉這樣的標誌）  </p></blockquote><br><br><p><a href="https://paulgraham.com/foundermode.html">Founder Mode</a></p><p>Paul Graham 指出，传统的扩大公司的方法论并不完全适合创业公司。有人会为创始人提供很多如何扩大公司的建议，但一些听从了这些建议的公司陷入了灾难。</p><p>Paul Graham 认为创始人常常收到错误建议，原因在于这些方法是根据职业经理人的做法总结的。而创始人往往具有超能力，能做到职业经理人做不到的事情。如果创始人没有运用超能力，就会感觉不对劲。这就是症结所在。</p><p>作者的结论是 1.存在两种模式：创始人模式和职业经理人模式<br>2.创始人模式可能比传统的职业经理人管理模式更有效，即使有时会显得很古怪，甚至让创始人陷入煤气灯效应一样的迷茫，但如果真正实践创始人模式，或许可以实现乔布斯一样的成就。——9.1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2018年我入职前司，Leader让我做手机端语音合成。当时隔壁部门也在做语音合成，但不是跑在手机端，服务跑在GPU上，对外提供接口，由一个在小米工作多年的语音合成专家坐镇。&lt;/p&gt;
&lt;p&gt;很快我发现，自己训练了几天的模型，生成结果人声的自然度和质</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>指令架构集是否有必要开源？聊聊RISC-V和开源闭源指令集的争议。</title>
    <link href="https://caoyihan.com/2024/09/22/proprietary-vs-open-isa-RISC-V/"/>
    <id>https://caoyihan.com/2024/09/22/proprietary-vs-open-isa-RISC-V/</id>
    <published>2024-09-22T16:14:51.000Z</published>
    <updated>2024-09-23T09:22:15.366Z</updated>
    
    <content type="html"><![CDATA[<p>RISC-V，根据维基百科的解释</p><blockquote><p>RISC-V 是一个基于精简指令集（RISC）原则的开源指令集架构（ISA）。该项目于2010年在加州大学伯克利分校启动。<br>与大多数指令集相比，RISC-V指令集可以自由地用于任何目的，允许任何人设计、制造和销售RISC-V芯片和软件而不必支付给任何公司专利费。虽然这不是第一个开源指令集，但它具有重要意义，因为其设计使其适用于现代计算设备（如仓库规模云计算机、高端移动电话和微小嵌入式系统）。设计者考虑到了这些用途中的性能与功率效率。该指令集还具有众多支持的软件，这解决了新指令集通常的弱点。</p></blockquote><p> 最近读到一篇关于开源与闭源（专有）指令架构集的<a href="https://research.cs.wisc.edu/multifacet/papers/ieeemicro16_card_isa.pdf">争论</a>。Dave Christie的观点，代表了传统闭源 ISA 阵营的观点。而 David Patterson 作为 RISC-V 的主要推动者之一，代表了开源 ISA 阵营。</p><span id="more"></span><p>Dave Christie：</p><blockquote><ol><li>主流ISA，（尤其是x86，ARM，Power, MIPS, Sparc），已经很好地为该行业服务了。</li><li>构建完美的指令架构集并不能确保商业上的成功。</li><li>指令架构集不仅仅是一门技术，更是生态系统。一旦达到一定规模，它的巨大生态会让它变得无比强大。</li><li>过去的经验证明，目前指令架构集的所有者会负责任地管理。</li><li>指令架构集会偶尔有失误，RISC-V也终将如此。</li></ol></blockquote><p>Dave Christie对 RISV-V提出质疑：</p><blockquote><ol><li>RISC-V存在很多替代品，例如 Open RISC, Lattice Mico32.</li><li>非常长的指令字（VLIW）格式是RISC-V中的一个选项。但这个选项过于学术化，因为它试图为太多人提供太多的东西。VLIW适合高度专业化而非通用的用途。</li><li>不赞成共享的开放核设计可以缩短进入市场的时间。</li><li>不赞成行业需要一个标准化的指令架构集来保护世界免遭专有指令集的垄断。</li></ol></blockquote><p>Dave Christie提出：与其在指令架构集进行标准化，不如使用「虚拟指令架构集」或中间件语言来标准化软硬件之间的接口。例如异构系统架构(Heterogeneous System Architecture(HSA))</p><p>另一方David Patterson认为：</p><blockquote><ol><li>开放的标准、开源的软件塑造了计算机行业，如表一。指令架构集不应该例外。</li><li>指令架构集是软硬件的相接之处，很重要。</li><li>专有的指令架构集是AMD和 Intel 构起的护城河。不仅拥有怪癖的专利，还会在你违反许可时起诉你。即使获得许可证也未必能免受诉讼。</li><li>ARM 的许可证不允许他人设计 ARM 内核，导致扼杀创新和竞争。</li><li>从技术角度看，指令架构集没有理由要专有。因为大部分的生态开发不是指令集的所有者开发，而是外部人员开发的。而且很多人都有设计优秀的指令架构集的经验。而且目前流行的指令集ARM 和 x86 不是特别优雅，只是比较成功。 而且如果指令集与特定的公司挂钩，那么公司倒闭时，指令架构集也会随之而逝。</li></ol></blockquote><p>David Patterson 认为开源指令架构集的优点：</p><blockquote><ol><li>开源产生更多的创新</li><li>共享的内核可以缩短进入市场的时间并降低成本。</li><li>共享的内核可以减少错误，因为大家都可以看得到。</li><li>便于学术研究。</li></ol></blockquote><p>David Patterson 还提出了一个很有意思的角度：</p><blockquote><p>RISC-V 是最小化的模块指令架构集。像 Intel 这类公司设计的指令架构集需要能处理任何东西，因此随着时间的推移，会越来越大。而在21世纪的架构中，指令架构集应该用于SoC（即 System on a Chip，系统级芯片）。这就是RISC-V 的优势：基础指令少，支持32, 64, 128位， 可以添加标准扩展，支持更小的指令大小，为特定SoC指令预留了空间。</p></blockquote><p>从2024年的角度来看，David Patterson关于开源指令架构集和RISC-V的观点大体上被证明是正确的。RISC-V作为一个模块化、可扩展的 ISA，确实获得了广泛采用。目前，RISC-V拥有蓬勃发展的生态系统，得到了学术界和工业界的大力支持，在嵌入式系统、IoT和高性能计算等领域都有所突破。（传统的专有指令架构集如ARM和x86在市场份额上目前仍然保持强势地位。）</p><p><img src="/../images/isa-1.png" alt="isa-1"></p><p><img src="/../images/isa-2.png" alt="isa-2"></p><p>注：ISA 是 Instruction Set Architecture 的缩写，中文通常翻译为”指令集架构”。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RISC-V，根据维基百科的解释&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RISC-V 是一个基于精简指令集（RISC）原则的开源指令集架构（ISA）。该项目于2010年在加州大学伯克利分校启动。&lt;br&gt;与大多数指令集相比，RISC-V指令集可以自由地用于任何目的，允许任何人设计、制造和销售RISC-V芯片和软件而不必支付给任何公司专利费。虽然这不是第一个开源指令集，但它具有重要意义，因为其设计使其适用于现代计算设备（如仓库规模云计算机、高端移动电话和微小嵌入式系统）。设计者考虑到了这些用途中的性能与功率效率。该指令集还具有众多支持的软件，这解决了新指令集通常的弱点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 最近读到一篇关于开源与闭源（专有）指令架构集的&lt;a href=&quot;https://research.cs.wisc.edu/multifacet/papers/ieeemicro16_card_isa.pdf&quot;&gt;争论&lt;/a&gt;。Dave Christie的观点，代表了传统闭源 ISA 阵营的观点。而 David Patterson 作为 RISC-V 的主要推动者之一，代表了开源 ISA 阵营。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Stripe 是如何招聘的</title>
    <link href="https://caoyihan.com/2024/09/19/How-Stripe-Hire/"/>
    <id>https://caoyihan.com/2024/09/19/How-Stripe-Hire/</id>
    <published>2024-09-20T03:38:02.000Z</published>
    <updated>2024-09-20T15:38:02.670Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://review.firstround.com/how-stripe-built-one-of-silicon-valleys-best-engineering-teams/">https://review.firstround.com/how-stripe-built-one-of-silicon-valleys-best-engineering-teams/</a></p><h2 id="衡量每个招聘渠道的绩效，并在发现最成功的地方加倍努力。"><a href="#衡量每个招聘渠道的绩效，并在发现最成功的地方加倍努力。" class="headerlink" title="衡量每个招聘渠道的绩效，并在发现最成功的地方加倍努力。"></a>衡量每个招聘渠道的绩效，并在发现最成功的地方加倍努力。</h2><p>要优化的指标是高质量员工的数量，而不是候选人的数量。</p><h2 id="招聘就像营销"><a href="#招聘就像营销" class="headerlink" title="招聘就像营销"></a>招聘就像营销</h2><p>招聘员工就像卖公司一样，要宣传公司的卖点。优秀的人才供不应求，你如何让他们愿意加入你的公司？有时需要建立一个品牌。</p><p>当你聘请工程师时，需要对对方有基础的了解。比如当你发布：，你想要愿意为公司奉献一生的人时，基本只会吸引二十多岁的人。</p><p>透明度是向候选人传达，你的公司是一个理想的工作场所的另一种好方法，特别是offer阶段。</p><h2 id="不要将间接证据视为权威"><a href="#不要将间接证据视为权威" class="headerlink" title="不要将间接证据视为权威"></a>不要将间接证据视为权威</h2><p>不要仅仅因为某人在 Google 工作过就认为他们会拥有广泛的分布式系统知识。谷歌规模的公司通常拥有预先构建的基础设施，工程师不需要知道如何构建它就可以使用它。每当 Stripe 对某人的能力作出假设时，结果都证明他们是错误的。<strong>向与他们共事过的人寻求个人推荐。</strong></p><h2 id="The-Sunday-Test"><a href="#The-Sunday-Test" class="headerlink" title="The Sunday Test"></a>The Sunday Test</h2><p>如果具有杰出工程才能的候选人不适合团队文化，Stripe 就会拒绝他们。每个候选人都必须通过“周日测试”。如果周日这个人独自在办公室，你是否更有可能进来并想与他们一起工作？如果答案不是明确的“是”，那么就不要雇用。雇用一些坏蛋可能会影响您未来吸引顶尖人才的能力。从短期来看，你可能会错过真正优秀的人才，但就像招聘一样，你必须打持久战。</p><h2 id="新职位或新部门的第一个员工非常重要。"><a href="#新职位或新部门的第一个员工非常重要。" class="headerlink" title="新职位或新部门的第一个员工非常重要。"></a><strong>新职位或新部门的第一个员工非常重要。</strong></h2><p>每当您为特定角色或部门雇用第一人个时，请始终坚持寻找掌握精通所有事项的人。此人定义了其部门的发展轨迹，并可能负责组建该团队。他们需要激励其他有才华的人愿意与他们一起工作。</p><p>这种角色可能非常难找。</p><h2 id="Hire-People-Instead-of-Roles"><a href="#Hire-People-Instead-of-Roles" class="headerlink" title="Hire People Instead of Roles"></a><strong>Hire People Instead of Roles</strong></h2><p>招聘人而不是招聘岗位，可以因人设岗。对于 Stripe 来说，一件事很有效，那就是招募那些在组织中没有立即发挥明显作用的人。如果你能想到这个人可以做的一件事，那么两个月后他&#x2F;她可能还会做另外十件你没有想到的事情。专注于招聘来填补某个职位可能会让你更有可能牺牲质量，只是为了找到拥有合适技能的人。</p><h2 id="相信你的直觉"><a href="#相信你的直觉" class="headerlink" title="相信你的直觉"></a><strong>相信你的直觉</strong></h2><p>和一个人在一起的感觉也是很准确的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原文链接：&lt;a href=&quot;https://review.firstround.com/how-stripe-built-one-of-silicon-valleys-best-engineering-teams/&quot;&gt;https://review.firstround.co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>12个月，12个初创产品</title>
    <link href="https://caoyihan.com/2024/09/19/12-startups-12-months/"/>
    <id>https://caoyihan.com/2024/09/19/12-startups-12-months/</id>
    <published>2024-09-19T10:22:07.000Z</published>
    <updated>2024-09-20T03:02:55.202Z</updated>
    
    <content type="html"><![CDATA[<p>自从年初听说了 Pieter Levels 的<a href="https://www.owenyoung.com/blog/books/make/">创业故事</a>之后，就很佩服。我现在虽然能构建产品了，但有时太完美主义了，拖延很严重。因此也想模仿 Pieter Levels <a href="https://levels.io/tag/12-startups-in-12-months/">在 12 个月内创建 12 个创业产品</a>。时间从2024.9.1开始，到2025.8.31结束。</p><h2 id="要旨："><a href="#要旨：" class="headerlink" title="要旨："></a>要旨：</h2><p>一. 避免完美主义，一定发布产品。</p><p>完成&gt;完美。自己曾总因产品不够完美，而不断拖延发布时间，这样的拖延，无论多么好的创业机会都会丧失。</p><p>二. <a href="https://www.nashvail.me/blog/stop-learning">避免一味学习</a></p><p>学习不是真实的进步。开始新的事情是不舒服的，因此你选择阅读一篇文章或参加一门课程，这样你就可以告诉自己你正在工作，但实际上，你只是在舒适圈中打转。在12个月内创建12个创业产品，逼迫自己不断创新地做一些事情。</p><h2 id="我的进度报告："><a href="#我的进度报告：" class="headerlink" title="我的进度报告："></a>我的进度报告：</h2><p>1.<a href="https://snap-ingredient.vercel.app/">Snap-Ingredient（食材专家）</a></p><p><img src="/../images/snap-ingredient.png" alt="image-20240919181826352"></p><p>（持续更新中……）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自从年初听说了 Pieter Levels 的&lt;a href=&quot;https://www.owenyoung.com/blog/books/make/&quot;&gt;创业故事&lt;/a&gt;之后，就很佩服。我现在虽然能构建产品了，但有时太完美主义了，拖延很严重。因此也想模仿 Pieter Lev</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>为什么 FastAPI 适合用 Uvicorn</title>
    <link href="https://caoyihan.com/2024/08/31/FastAPI-and-Uvicorn/"/>
    <id>https://caoyihan.com/2024/08/31/FastAPI-and-Uvicorn/</id>
    <published>2024-08-31T12:35:10.000Z</published>
    <updated>2024-09-23T04:27:36.855Z</updated>
    
    <content type="html"><![CDATA[<p>TL;DR：Uvicorn 很适合 FastAPI。如果使用 FastAPI，建议首选 Uvicorn 作为 ASGI Web 服务器</p><span id="more"></span><h4 id="FastAPI"><a href="#FastAPI" class="headerlink" title="FastAPI"></a>FastAPI</h4><p>FastAPI 是一个 Python 框架。</p><h4 id="WSGI-ASGI"><a href="#WSGI-ASGI" class="headerlink" title="WSGI&amp;ASGI"></a>WSGI&amp;ASGI</h4><p>WSGI (Web Server Gateway Interface) Servers 是一种 Python Web 服务器技术，它定义了 Web 服务器和 Python Web 应用程序之间的标准接口。WSGI 服务器为不同的 Python Web 框架和 Web 服务器提供一个通用接口，增强互操作性。WSGI 服务器接收 HTTP 请求，将其转换为 WSGI 环境，调用 Python 应用，然后将响应发送回客户端。</p><p>ASGI（Asynchronous Server Gateway Interface，异步服务器网关接口）是 WSGI 的精神继承者，旨在在支持异步的 Python Web 服务器、框架和应用程序之间提供标准接口。</p><p>WSGI 是同步的，每个请求在处理完成前会阻塞线程。而 ASGI 则为异步和同步应用程序提供了一种标准，具有 WSGI 向后兼容性实现以及多个服务器和应用程序框架。</p><h4 id="Uvicorn"><a href="#Uvicorn" class="headerlink" title="Uvicorn"></a>Uvicorn</h4><p>而 Uvicorn 是一个快速的 ASGI web 服务器，专为 Python 设计。</p><h3 id="为什么FastAPI适合用Uvicorn"><a href="#为什么FastAPI适合用Uvicorn" class="headerlink" title="为什么FastAPI适合用Uvicorn"></a>为什么FastAPI适合用Uvicorn</h3><ol><li>FastAPI 主要设计用于与 ASGI 服务器一起使用，而不是 WSGI 服务器。FastAPI 也需要一个 ASGI 服务器来运行。Uvicorn可以提供异步支持。FastAPI 重度使用 Python 的异步特性。Uvicorn 作为一个异步服务器，能够充分发挥 FastAPI 的异步性能。</li><li>Uvicorn 是一个非常快速的 ASGI 服务器，它基于 uvloop 和 httptools 构建，这两者都是用 Cython 写的高性能 Python 网络库。</li><li>开发便利性：<br>Uvicorn 提供了热重载功能（通过 –reload 参数），这在开发过程中非常有用，可以实时看到代码修改的效果。热重载是指，在开发过程中，当你修改代码后，服务器能够自动检测到这些更改并重新启动，使新的代码变更立即生效，而无需手动停止和重启服务器。热重载功能可以大幅提高开发效率。</li><li>轻量级，且易于使用：<br>Uvicorn 是一个轻量级服务器，不会给应用增加太多额外的复杂性或开销。Uvicorn 使用很简单，几乎不用额外学习即可上手。通常只需一行命令就可以启动 FastAPI 应用。</li></ol><h3 id="对比其他-ASGI-服务器："><a href="#对比其他-ASGI-服务器：" class="headerlink" title="对比其他 ASGI 服务器："></a>对比其他 ASGI 服务器：</h3><p>Daphne或许更适合Django，不是 FastAPI的最佳选择。<br>Hypercorn 性能可能不如Uvicorn，配置可能相对复杂。<br>Gunicorn (with Uvicorn workers)。Gunicorn本身是一个WSGI服务器，但它可以使用Uvicorn workers来支持ASGI。主要缺点也是配置更复杂一点。</p><p>参考链接：<a href="https://asgi.readthedocs.io/en/latest/">ASGI Documentation</a></p><p><a href="https://www.fullstackpython.com/wsgi-servers.html">Full Stack Python</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;TL;DR：Uvicorn 很适合 FastAPI。如果使用 FastAPI，建议首选 Uvicorn 作为 ASGI Web 服务器&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>文摘-24年8月</title>
    <link href="https://caoyihan.com/2024/08/31/Digest-24-8/"/>
    <id>https://caoyihan.com/2024/08/31/Digest-24-8/</id>
    <published>2024-08-31T05:42:35.000Z</published>
    <updated>2024-09-01T17:43:01.385Z</updated>
    
    <content type="html"><![CDATA[<p>原来「李沐」停更去创业了。<br><a href="https://www.bilibili.com/read/cv37076357">https://www.bilibili.com/read/cv37076357</a></p><blockquote><p>22年年底的时候想到两个用大语言模型（LLM）做生产力工具的想法。碰巧遇到张一鸣，就向他请教。讨论之后他反问：为什么不做LLM本身呢？我的下意识退缩：我们之前在Amazon的团队做了好几年这个，得上万张卡，和blabla这么一大堆困难。一鸣呵呵表示：这些都是短期困难，眼光得看长远点。 </p></blockquote><blockquote><p>有了钱后就去买GPU。问各个供应商，统一回复是H100交货得一年以后了。灵机一动，直接给老黄写邮件。老黄秒回说他来看下。一个小时后超微的CEO就打电话过来了。多付了些钱，插了个队，20天后拿到了机器。很荣幸早早的吃到了螃蟹。</p><p>螃蟹吃到怀疑人生，遇到了各种匪夷所思的bug。例如GPU供电不足导致不稳定，后来靠超微工程师修改bios代码打上补丁；例如光纤的切开角度不对，导致通讯不稳定；例如Nvidia的推荐网络布局不是最优，我们重新做一个方案，后来Nvidia自己也采用了这个方案。至今我都不理解，我们就买了不到一千张卡，算小买家吧。但我们遇到的这些问题，难道大买家没遇到吗，为啥需要我们的debug？</p></blockquote><blockquote><p>那么一个人的存在的意义是什么呢？小时候曾因为想不清这个问题而抑郁。所以潜意识里，我想去创造价值，获得存在的意义。我选择“上进”，去提升自己的创造价值的能力；选择录长视频和写教材，创造教育价值；选择去写读博、工作、创业的总结，描述里面的纠结和困难，创造事例的价值；选择去创业，团结很多人的力量去创造更大价值。</p></blockquote><p>Eric Schmidt 斯坦福演讲</p><blockquote><p>Google decided that work life balance and going home early and working from home was more important than winning. And the startups, the reason startups work is because the people work like hell. And I’m sorry to be so blunt, but the fact of the matter is if you all leave the university and go found a company, you’re not going to let people work from home and only come in one day a week. If you want to compete against the other startups with the early days of Google, Microsoft was like that. Exactly.<br>谷歌认为，工作与生活的平衡、早点回家和在家工作比获胜更重要。对于初创公司来说，初创公司之所以能成功，是因为人们拼命工作。我很抱歉这么直言不讳，但事实是，如果你们都离开大学去寻找一家公司，你们不会让人们在家工作，每周只来一天。如果你想与谷歌早期的其他初创公司竞争，微软就是这样的。确切地。</p><p>But now it seems to be, there’s a long history of in my industry, our industry, I guess, of companies winning in a genuinely creative way and really dominating a space and not making this the next transition. So we’re very well documented. And I think that the truth is founders are special. The founders need to be in charge. The founders are difficult to work with.<br>但现在看来，在我的行业、我们的行业，我想，公司以真正的创造性方式获胜并真正主导一个空间，而不是将其作为下一个转型，有着悠久的历史。所以我们有很好的记录。我认为事实是创始人很特别。创始人需要负责。创始人很难共事。</p><p>They push people hard. As much as we can dislike Elon’s personal behavior, look at what he gets out of people. I had dinner with him and he was flying. I was in Montana. He was flying that night at 10 PM to have a meeting at midnight with x.ai.<br>他们对人们施加压力。尽管我们可能不喜欢埃隆的个人行为，但看看他从人们身上得到了什么。我和他一起吃晚饭，他正在飞行。我当时在蒙大拿州。那天晚上 10 点，他乘飞机前往午夜与 x.ai 开会。</p></blockquote><blockquote><p>Coke and Pepsi will still be around and the fight between Coke and Pepsi will continue to go on and it’s all glacial. When I dealt with telcos, the typical telco deal would take 18 months to sign. There’s no reason to take 18 months to do anything. Get it done. We’re in a period of maximum growth, maximum gain.<br>可口可乐和百事可乐仍将存在，可口可乐和百事可乐之间的斗争将继续进行，而且一切都是冰冷的。当我与电信公司打交道时，典型的电信公司协议需要 18 个月才能签署。没有理由花 18 个月来做任何事情。完成它。我们正处于最大成长、最大收获的时期。</p></blockquote><p><a href="https://blog.samaltman.com/e-pur-si-muove">E Pur Si Muove</a></p><blockquote><p>Earlier this year, I noticed something in China that really surprised me.  I realized I felt more comfortable discussing controversial ideas in Beijing than in San Francisco.  I didn’t feel completely comfortable—this was China, after all—just more comfortable than at home.<br>今年早些时候，我注意到中国发生了一些令我惊讶的事情。我意识到，在北京讨论有争议的想法比在旧金山更舒服。我感觉并不完全舒服——毕竟这是中国——只是比在家里舒服多了。</p></blockquote><blockquote><p>限制言论会导致思想的限制，继而导致创新的限制。最成功的社会通常是最开放的社会。通常主流思想是正确的，异端思想是错误的，但真实和不受欢迎的思想才是推动世界前进的动力。</p></blockquote><p>因此自己也应该对不同的思想更包容。</p><p><a href="https://blog.samaltman.com/the-post-yc-slump">The Post-YC Slump YC</a></p><p>Sam Altman 指出，很多公司在离开YC之后，没有继续坚持不懈地专注于构建一个伟大的产品，而是专注于其他。而且工作也不那么努力，效率也比较低。（失去了YC期间的同辈压力）</p><p>这也让我想起之前在黑客松时爆棚的生产力。</p><blockquote><p>在 YC 期间，我们毫不留情地提醒初创公司，虚假工作不算数，无论您做得多么激烈，仍然会让您获得失败的创业机会。我们也很无情地询问你的进步，如果事情不顺利，我们会对你诚实。在 YC 之后，我们与初创公司的联系减少了——如果你愿意，你可以对我们暗淡无声。就其本身而言，这几乎总是一个迹象，表明创业公司做得很糟糕。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原来「李沐」停更去创业了。&lt;br&gt;&lt;a href=&quot;https://www.bilibili.com/read/cv37076357&quot;&gt;https://www.bilibili.com/read/cv37076357&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;22年年</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>冲浪在同一片海</title>
    <link href="https://caoyihan.com/2024/08/27/Chinese-Identity/"/>
    <id>https://caoyihan.com/2024/08/27/Chinese-Identity/</id>
    <published>2024-08-27T10:32:54.000Z</published>
    <updated>2024-09-01T01:09:19.896Z</updated>
    
    <content type="html"><![CDATA[<p>当代的各种网络文化，可能也是构成「我是中国人」的认同之一。</p><p>最近在纽约，想认识中国人实在太太容易了：只要听到有人说中文，上去打招呼就行。然而自我介绍自己是 I 人或 E 人，好像才是中国人身份认同中最有辨识性的一部分。</p><p>当代的各种网络文化，似乎是网络上许多中国年轻人主动塑造的共同认同。</p><p>不鸟万如一对身份认同的看法：[1]<a href="https://blog.yitianshijie.net/2024/08/12/what-does-it-mean-to-be-chinese-according-to-sub-wb/">https://blog.yitianshijie.net/2024/08/12/what-does-it-mean-to-be-chinese-according-to-sub-wb/</a></p><p>sub_wb_ 對中國人身份認同提供了一个新的视角:<a href="https://www.threads.net/@sun_wb_/post/C-iOXJqIYkM/">https://www.threads.net/@sun_wb_/post/C-iOXJqIYkM/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当代的各种网络文化，可能也是构成「我是中国人」的认同之一。&lt;/p&gt;
&lt;p&gt;最近在纽约，想认识中国人实在太太容易了：只要听到有人说中文，上去打招呼就行。然而自我介绍自己是 I 人或 E 人，好像才是中国人身份认同中最有辨识性的一部分。&lt;/p&gt;
&lt;p&gt;当代的各种网络文化，似乎是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>新的焦虑（留学版）</title>
    <link href="https://caoyihan.com/2024/08/26/new-anxiety-on-studing-abroad/"/>
    <id>https://caoyihan.com/2024/08/26/new-anxiety-on-studing-abroad/</id>
    <published>2024-08-26T08:38:30.000Z</published>
    <updated>2024-08-26T20:38:30.108Z</updated>
    
    <content type="html"><![CDATA[<p>从留学开始，就有了很多很多新的烦恼。</p><h2 id="租房"><a href="#租房" class="headerlink" title="租房"></a>租房</h2><p>首先，在美国租房就是极大的难题。</p><p>很多人会选择在国内提前租好。但在国内看美国的房子可不容易，照片想拍得好看太容易了，很多问题只有线下才看得出来。我当时虽然花了很多时间找房，但对价格和位置都没有认知，一开始把预算设的很低，也意味着没什么好房子。而且租房效率也很低，要跟很多人线上了，「线上聊天」这种事自然超级浪费时间，真心心疼。</p><p>况且租房就是至少一笔二三十万的决策，我不是很信任单纯地线上看房。万一踩雷了，都不知道怎么办才好。因此没有选择在国内就找好，而是想先找短租，落地美国后再去看房租房。</p><p>（不得不说一句，1500人民币住的酒店可真凄凉，再中国酒店习以为常的牙具、吹风机、拖鞋、热水壶、沐浴露、茶叶等等都没有，几乎就是什么都没有。不知道美国其他酒店是不是也是这样。）</p><p>然而一开始在Airbnb, StreetEasy等多个美国网站上找短期的房子，都需要美国电话卡，但当时时间太紧了，又没借到电话号码。（当时我还不知道可以在国内提前就买美国电话卡。）但突然发现美国入关时是要求要有住处的，很头疼，也尤其担心入关。后来在朋友的建议下，先住几天酒店过渡。（幸好入关很顺利）</p><p>后来落地后找到新的长期住处还比较顺利。在各个平台上搜，还直接线下去各个apartments看房。但是新的住处是9.1开始，而我到美国是8.21，意味着我又十多天要找地方住。这在中国的话就很容易解决，即使一直住酒店也还不会特别贵。但是在纽约，最便宜的酒店一天也要1000~1500人民币。后来我软磨硬泡一个只肯出长租的朋友，短租给我一个星期。虽然我也付了钱，但还是颇为感激的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从留学开始，就有了很多很多新的烦恼。&lt;/p&gt;
&lt;h2 id=&quot;租房&quot;&gt;&lt;a href=&quot;#租房&quot; class=&quot;headerlink&quot; title=&quot;租房&quot;&gt;&lt;/a&gt;租房&lt;/h2&gt;&lt;p&gt;首先，在美国租房就是极大的难题。&lt;/p&gt;
&lt;p&gt;很多人会选择在国内提前租好。但在国内看美</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记录Auth.js的callbackUrl问题解决经历</title>
    <link href="https://caoyihan.com/2024/08/13/Authjs-callbackUrl/"/>
    <id>https://caoyihan.com/2024/08/13/Authjs-callbackUrl/</id>
    <published>2024-08-13T12:59:37.000Z</published>
    <updated>2024-09-23T04:27:16.266Z</updated>
    
    <content type="html"><![CDATA[<p>最近在给Next.js项目配置 Auth.js时，遇到一个很头疼的问题。在本地测试和在Vercel上部署时，均可正常运行，但是同样的代码部署到 Google Cloud 云服务器上时，就会有问题。具体问题是，当使用Github登录时，callback会callback到<a href="http://0.0.0.0:3000/api/auth/signin?error=OAuthCallbackError">http://0.0.0.0:3000/api/auth/signin?error=OAuthCallbackError</a></p><span id="more"></span><p>一开始猜测是Nginx配置问题，检查之后确认无误。</p><p>后面花了很长时间，才意识到，Auth.js可以开启debug:true。开启后，发现我向github发送的请求内容中，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;signinUrl&quot;: &quot;http://0.0.0.0:3000/api/auth/signin/github&quot;,</span><br><span class="line">“callbackUrl”： “http://0.0.0.0:3000/api/auth/callback/github”，</span><br></pre></td></tr></table></figure><p>虽然没有发现具体原因。但是想起auth.js文档中，明确写了v5版本，不需要规定<code>AUTH_URL</code></p><p><img src="/../images/authjs-AUTH_URL.png" alt="Auth.js AUTH_URL"></p><p>在环境变量中，设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AUTH_URL=【自己的域名】</span><br><span class="line">例如：AUTH_URL=https://podcasthighlight.com</span><br></pre></td></tr></table></figure><p>重启项目，发现运行正常，问题解决。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在给Next.js项目配置 Auth.js时，遇到一个很头疼的问题。在本地测试和在Vercel上部署时，均可正常运行，但是同样的代码部署到 Google Cloud 云服务器上时，就会有问题。具体问题是，当使用Github登录时，callback会callback到&lt;a href=&quot;http://0.0.0.0:3000/api/auth/signin?error=OAuthCallbackError&quot;&gt;http://0.0.0.0:3000/api/auth/signin?error=OAuthCallbackError&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Next.js项目部署云服务器全流程（git仓库直接部署版）</title>
    <link href="https://caoyihan.com/2024/08/06/Nextjs-deploy-cloud-git/"/>
    <id>https://caoyihan.com/2024/08/06/Nextjs-deploy-cloud-git/</id>
    <published>2024-08-06T15:12:25.000Z</published>
    <updated>2024-08-12T11:09:49.061Z</updated>
    
    <content type="html"><![CDATA[<p><strong>TL;DR</strong>：这篇文章是关于用最简单的方法在云服务器上部署Next.js项目的简易教程。主要使用Ubuntu 22.04,（Google Cloud）,pm2, screen, Nginx</p><h2 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一. 准备工作"></a>一. 准备工作</h2><ol><li>本地项目存储到github仓库</li><li>准备一台云服务器。这里使用的是Ubuntu 22.04, Google Cloud</li></ol><span id="more"></span><h2 id="二-云服务器准备工作"><a href="#二-云服务器准备工作" class="headerlink" title="二. 云服务器准备工作"></a>二. 云服务器准备工作</h2><ol><li>云服务器安装 Node.js 和 npm<ol><li>更新系统包列表：sudo apt update</li><li>安装一些必要的工具：sudo apt install -y curl dirmngr apt-transport-https lsb-release ca-certificates software-properties-common</li><li>导入 NodeSource GPG 密钥：<br> curl -fsSL <a href="https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key">https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key</a> | sudo gpg –dearmor -o &#x2F;etc&#x2F;apt&#x2F;keyrings&#x2F;nodesource.gpg</li><li>创建 NodeSource 仓库文件：echo “deb [signed-by&#x3D;&#x2F;etc&#x2F;apt&#x2F;keyrings&#x2F;nodesource.gpg] <a href="https://deb.nodesource.com/node_20.x">https://deb.nodesource.com/node_20.x</a> nodistro main” | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nodesource.list</li><li>sudo apt update</li><li>安装 Node.js 和 npm：sudo apt install -y nodejs</li><li>检查：node -v  npm -v</li></ol></li><li>安装 PM2 (用于进程管理，比较容易，推荐安装)<ol><li>npm install -g pm2</li></ol></li></ol><h2 id="三-将-Next-js-项目传输到服务器"><a href="#三-将-Next-js-项目传输到服务器" class="headerlink" title="三. 将 Next.js 项目传输到服务器"></a>三. 将 Next.js 项目传输到服务器</h2><ol><li>在服务器上 clone 您的仓库</li><li>.env文件，直接从本地上传。Google Cloud提供本地上传文件服务。（注意：.开头的文件，在Linux中默认隐藏。使用）</li></ol><h2 id="四-在服务器上构建您的项目"><a href="#四-在服务器上构建您的项目" class="headerlink" title="四. 在服务器上构建您的项目"></a>四. 在服务器上构建您的项目</h2><p>1.<br>        cd your-nextjs-project<br>        npm install<br>        npm run build<br>2.  使用 PM2 启动您的应用<br>    1. 创建一个名为 <code>ecosystem.config.js</code> 的文件，内容如下：<br>       <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  apps: [&#123;</span><br><span class="line">    name: &quot;nextjs-app&quot;,</span><br><span class="line">    script: &quot;npm&quot;,</span><br><span class="line">    args: &quot;start&quot;,</span><br><span class="line">    env: &#123;</span><br><span class="line">      NODE_ENV: &quot;production&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>   然后运行：   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start ecosystem.config.js</span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li>配置 Nginx<ol><li>安装 Nginx：<code>sudo apt install nginx</code> (Ubuntu) 或 <code>sudo yum install nginx</code> (CentOS)</li></ol></li><li>检查防火墙：确保开放 80 端口（HTTP）和 443 端口（HTTPS，如果使用）<ol><li>注意，google cloud 默认的端口是开放的，所以不需要另外设置。</li></ol></li><li>设置 SSL。使用 Let’s Encrypt 和 Certbot 可以轻松设置免费的 SSL 证书<ol><li>sudo apt install certbot python3-certbot-nginx -y</li><li>sudo certbot –nginx -d your_domain.com</li></ol></li></ol><h2 id="五-启动应用"><a href="#五-启动应用" class="headerlink" title="五.启动应用"></a>五.启动应用</h2><ol><li>使用 screen 创建一个新会话：screen -S nextjs</li><li>在 screen 会话中，使用 PM2 启动您的应用：pm2 start npm –name “next-app” – start</li><li>设置 PM2 在服务器重启时自动启动您的应用：<br> pm2 startup systemd<br> pm2 save</li><li>分离 screen 会话：按 <code>Ctrl+A</code> 然后按 <code>D</code></li></ol><h2 id="六-Nginx配置"><a href="#六-Nginx配置" class="headerlink" title="六. Nginx配置"></a>六. Nginx配置</h2><ol><li><p>sudo nano &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;[项目名字或者域名]例如 podcasthighlight.com</p></li><li><p>添加Nginx配置：<br> server {<br> listen 80;<br> listen [::]:80;<br> server_name podcasthighlight.com;<br> return 301 https:&#x2F;&#x2F;$server_name$request_uri;<br> }</p><p> server {<br> listen 443 ssl http2;<br> listen [::]:443 ssl http2;<br> server_name podcasthighlight.com;<br><br> ssl_certificate &#x2F;path&#x2F;to&#x2F;your&#x2F;fullchain.pem;<br> ssl_certificate_key &#x2F;path&#x2F;to&#x2F;your&#x2F;privkey.pem;<br><br> # 推荐的 SSL 设置<br> ssl_protocols TLSv1.2 TLSv1.3;<br> ssl_prefer_server_ciphers on;<br> ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;<br> ssl_session_cache shared:SSL:10m;<br> ssl_session_timeout 10m;<br> ssl_session_tickets off;<br><br> # HSTS (可选，但推荐)<br> add_header Strict-Transport-Security “max-age&#x3D;31536000; includeSubDomains” always;<br><br> location &#x2F; {<br>     proxy_pass <a href="http://localhost:3000/">http://localhost:3000</a>;<br>     proxy_http_version 1.1;<br>     proxy_set_header Upgrade $http_upgrade;<br>     proxy_set_header Connection ‘upgrade’;<br>     proxy_set_header Host $host;<br>     proxy_cache_bypass $http_upgrade;<br><br>     proxy_set_header X-Real-IP $remote_addr;<br>     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>     proxy_set_header X-Forwarded-Proto $scheme;<br> }<br><br> # 可选：配置访问日志和错误日志<br> access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;podcasthighlight.access.log;<br> error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;podcasthighlight.error.log;<br> }</p></li><li><p>启动 Nginx<br>sudo ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;[项目名字或者域名] &#x2F;etc&#x2F;nginx&#x2F;sites-enabled<br>sudo nginx -t<br>sudo systemctl restart nginx</p></li></ol><h2 id="七-域名相关"><a href="#七-域名相关" class="headerlink" title="七.域名相关"></a>七.域名相关</h2><ol><li>Google Cloud需要设置静态 IP，这个可能需要一点费用。</li></ol><p>请注意：先设置静态IP，然后配置域名DNS，再配置SSL。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;：这篇文章是关于用最简单的方法在云服务器上部署Next.js项目的简易教程。主要使用Ubuntu 22.04,（Google Cloud）,pm2, screen, Nginx&lt;/p&gt;
&lt;h2 id=&quot;一-准备工作&quot;&gt;&lt;a href=&quot;#一-准备工作&quot; class=&quot;headerlink&quot; title=&quot;一. 准备工作&quot;&gt;&lt;/a&gt;一. 准备工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;本地项目存储到github仓库&lt;/li&gt;
&lt;li&gt;准备一台云服务器。这里使用的是Ubuntu 22.04, Google Cloud&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>文摘-24年7月</title>
    <link href="https://caoyihan.com/2024/07/31/%E6%96%87%E6%91%98-24%E5%B9%B47%E6%9C%88/"/>
    <id>https://caoyihan.com/2024/07/31/%E6%96%87%E6%91%98-24%E5%B9%B47%E6%9C%88/</id>
    <published>2024-07-31T13:29:20.000Z</published>
    <updated>2024-08-03T00:56:09.329Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.semianalysis.com/p/google-we-have-no-moat-and-neither">《Google “We Have No Moat, And Neither Does OpenAI” 谷歌“我们没有护城河，OpenAI 也没有”》</a></p><p>旧文重读，这篇文章很重要。</p><p><a href="https://paulgraham.com/startupmistakes.html">《The 18 Mistakes That Kill Startups》</a></p><p>Paul Graham 对初创公司提了一些建议：</p><ol><li><p>不要只有一个创始人，即不要独自创业。因为这表明你的idea 吸引不到其他人参与。而且创业很困难，你需要合伙人一起集思广益，说服自己避免愚蠢的决定，并在陷入低估时振奋起来。</p></li><li><p>要选一个好位置。最好是硅谷，其次是波士顿、西雅图、奥斯汀、丹佛和纽约。</p></li><li><p>不要害怕竞争，不要做太微小的市场。</p><blockquote><p><strong>3. Marginal Niche 3. 边缘利基</strong></p><p>Most of the groups that apply to Y Combinator suffer from a common problem: choosing a small, obscure niche in the hope of avoiding competition.<br>大多数申请 Y Combinator 的群体都有一个共同点： 问题：选择一个小的、不起眼的利基市场以避免 竞赛。</p><p>If you watch little kids playing sports, you notice that below a certain age they’re afraid of the ball. When the ball comes near them their instinct is to avoid it. I didn’t make a lot of catches as an eight year old outfielder, because whenever a fly ball came my way, I used to close my eyes and hold my glove up more for protection than in the hope of catching it.<br>如果你观察小孩子做运动，你会注意到下面的 到了一定年龄他们就会害怕球。当球靠近时 他们的本能是避免它。我没有抓到很多东西 作为一名八岁的外野手，因为每当飞球到来时 我的方式是，我常常闭上眼睛，更多地举起手套 保护而不是希望抓住它。</p><p>Choosing a marginal project is the startup equivalent of my eight year old strategy for dealing with fly balls. If you make anything good, you’re going to have competitors, so you may as well face that. You can only avoid competition by avoiding good ideas.<br>选择一个边际项目相当于我的八个项目的启动 一年前处理飞球的策略。如果你做了什么 很好，你将会有竞争对手，所以你不妨面对 那。你只能通过避免好的想法来避免竞争。</p><p>I think this shrinking from big problems is mostly unconscious. It’s not that people think of grand ideas but decide to pursue smaller ones because they seem safer. Your unconscious won’t even let you think of grand ideas. So the solution may be to think about ideas without involving yourself. What would be a great idea for <em>someone else</em> to do as a startup?<br>我认为这种面对大问题的退缩大多是无意识的。 人们并不是想到了宏伟的想法，而是决定去追求 较小的，因为它们看起来更安全。你的无意识甚至不会 让你想到宏伟的想法。所以解决方案可能是考虑 不涉及自己的想法。什么是个好主意 <em>别人</em>来做初创公司吗？</p></blockquote><p>这点特意直接摘录原文。Paul Graham 这篇文章创作于2006年，所以我不确定在2024年，这些建议是否是 100% 正确的。因为上面几点都和 Pieter Levels 都很不同。Pieter Levels 建议首先独自创业，因此对创业的地点更没有要求，而且建议从微小的市场切入。</p></li></ol><span id="more"></span><p><a href="https://nav.al/angel-1">《How to Angel Invest, Part 1》</a></p><blockquote><p><strong>Few people can play at angel investing<br>很少有人可以参与天使投资</strong></p><p>Angel investing is odd in that very few people can play in it. Very few people have the know-how, geographic access, capital, risk horizon and patience. But at the same time, the underlying assets are changing the world.<br>天使投资很奇怪，因为很少有人可以参与其中。很少有人拥有专业知识、地理准入、资本、风险范围和耐心。但与此同时，标的资产正在改变世界。</p><p>I see a lot of people in Silicon Valley who could be good angel investors —they are in the tech industry and have access to dealflow—but instead spend their time on other things. They spend time thinking about macroeconomics: <em>What if the Fed cuts interest rates? What’s happening in the trade war with China?</em> Or they’re shorting stocks, investing in special economic zones or flipping real estate.<br>我看到硅谷有很多人可以成为优秀的天使投资人——他们在科技行业，可以接触到交易流——但他们却把时间花在其他事情上。他们花时间思考宏观经济学：如果美联储降息怎么办？与中国的贸易战发生了什么？或者他们正在做空股票，投资经济特区或炒作房地产。</p></blockquote><p>——2024.7.27</p><p>如果可以随时变更想法，或许更有利于创新。</p><p>The real diversity that matters is the diversity of ideas .</p><p>真正重要的多样性是思想的多样性</p><p><a href="https://nav.al/decentralization">source</a></p><p>——2024.7.23 </p><p>团体不会承认失败，也更难转换想法。而在团队中转变想法，会让团体分崩离析。这或许也是小微创业者的机会。</p><p><a href="https://nav.al/failure">source</a></p><p>——2024.7.23 </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.semianalysis.com/p/google-we-have-no-moat-and-neither&quot;&gt;《Google “We Have No Moat, And Neither Does OpenAI” 谷歌“我们没有护城河，OpenAI 也没有”》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;旧文重读，这篇文章很重要。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://paulgraham.com/startupmistakes.html&quot;&gt;《The 18 Mistakes That Kill Startups》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paul Graham 对初创公司提了一些建议：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不要只有一个创始人，即不要独自创业。因为这表明你的idea 吸引不到其他人参与。而且创业很困难，你需要合伙人一起集思广益，说服自己避免愚蠢的决定，并在陷入低估时振奋起来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要选一个好位置。最好是硅谷，其次是波士顿、西雅图、奥斯汀、丹佛和纽约。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要害怕竞争，不要做太微小的市场。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;3. Marginal Niche 3. 边缘利基&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most of the groups that apply to Y Combinator suffer from a common problem: choosing a small, obscure niche in the hope of avoiding competition.&lt;br&gt;大多数申请 Y Combinator 的群体都有一个共同点： 问题：选择一个小的、不起眼的利基市场以避免 竞赛。&lt;/p&gt;
&lt;p&gt;If you watch little kids playing sports, you notice that below a certain age they’re afraid of the ball. When the ball comes near them their instinct is to avoid it. I didn’t make a lot of catches as an eight year old outfielder, because whenever a fly ball came my way, I used to close my eyes and hold my glove up more for protection than in the hope of catching it.&lt;br&gt;如果你观察小孩子做运动，你会注意到下面的 到了一定年龄他们就会害怕球。当球靠近时 他们的本能是避免它。我没有抓到很多东西 作为一名八岁的外野手，因为每当飞球到来时 我的方式是，我常常闭上眼睛，更多地举起手套 保护而不是希望抓住它。&lt;/p&gt;
&lt;p&gt;Choosing a marginal project is the startup equivalent of my eight year old strategy for dealing with fly balls. If you make anything good, you’re going to have competitors, so you may as well face that. You can only avoid competition by avoiding good ideas.&lt;br&gt;选择一个边际项目相当于我的八个项目的启动 一年前处理飞球的策略。如果你做了什么 很好，你将会有竞争对手，所以你不妨面对 那。你只能通过避免好的想法来避免竞争。&lt;/p&gt;
&lt;p&gt;I think this shrinking from big problems is mostly unconscious. It’s not that people think of grand ideas but decide to pursue smaller ones because they seem safer. Your unconscious won’t even let you think of grand ideas. So the solution may be to think about ideas without involving yourself. What would be a great idea for &lt;em&gt;someone else&lt;/em&gt; to do as a startup?&lt;br&gt;我认为这种面对大问题的退缩大多是无意识的。 人们并不是想到了宏伟的想法，而是决定去追求 较小的，因为它们看起来更安全。你的无意识甚至不会 让你想到宏伟的想法。所以解决方案可能是考虑 不涉及自己的想法。什么是个好主意 &lt;em&gt;别人&lt;/em&gt;来做初创公司吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这点特意直接摘录原文。Paul Graham 这篇文章创作于2006年，所以我不确定在2024年，这些建议是否是 100% 正确的。因为上面几点都和 Pieter Levels 都很不同。Pieter Levels 建议首先独自创业，因此对创业的地点更没有要求，而且建议从微小的市场切入。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>小红书的粉丝有用吗</title>
    <link href="https://caoyihan.com/2024/07/29/Are-fans-of-Little-Red-Book-useful/"/>
    <id>https://caoyihan.com/2024/07/29/Are-fans-of-Little-Red-Book-useful/</id>
    <published>2024-07-30T02:55:47.000Z</published>
    <updated>2024-07-30T02:55:47.099Z</updated>
    
    <content type="html"><![CDATA[<p>今天也在想：小红书的粉丝有什么用？</p><p>如果是自己的粉丝的话，自己可以或许推广一下自己的产品，或者可以作为个人品牌来推广自己。但好像很多小红书号，不能做这样的用途，只可以接一些利润微薄的商单。</p><p>昨天泽凯哥跟我说，他在国外留学时，「小红书简直是救命稻草」「新时代的百科全书」我也很好奇，为什么小红书上可以产生那么多的生活指南，而百度不能？而且，小红书的流量逻辑，让作为创作者的自己倍感焦虑，为什么小红书的 UGC 还可以做得那么好？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天也在想：小红书的粉丝有什么用？&lt;/p&gt;
&lt;p&gt;如果是自己的粉丝的话，自己可以或许推广一下自己的产品，或者可以作为个人品牌来推广自己。但好像很多小红书号，不能做这样的用途，只可以接一些利润微薄的商单。&lt;/p&gt;
&lt;p&gt;昨天泽凯哥跟我说，他在国外留学时，「小红书简直是救命稻草</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>无需扩展</title>
    <link href="https://caoyihan.com/2024/07/29/Not-Scaling/"/>
    <id>https://caoyihan.com/2024/07/29/Not-Scaling/</id>
    <published>2024-07-29T05:40:13.000Z</published>
    <updated>2024-07-29T05:40:13.789Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://tailscale.com/blog/new-internet">《The New Internet 新互联网》</a>：</p><blockquote><p>在现代计算中，我们容忍长时间的构建，然后是 docker 构建，然后上传到容器存储，以及程序运行前的几分钟部署时间，甚至在日志输出上传到您可以看到它的地方之前的时间更长，所有这些都是因为我们被欺骗了，认为一切都必须扩展。人们对部署到最新的新兴容器托管服务感到兴奋，因为它只需几十秒即可推出，而不是几分钟。但是在 1990 年代我缓慢的计算机上，我可以运行一个 perl 或 python 程序，该程序在毫秒内启动，每秒处理超过 0.2 个请求，并立即将日志打印到 stderr，这样我就可以一遍又一遍地编辑-运行-调试，每分钟多次。</p></blockquote><p>而事实上，很多东西根本不会扩展，所以也不需要提前扩展。但类似的扩展工作可能提前占用了开发人员大量的时间。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://tailscale.com/blog/new-internet&quot;&gt;《The New Internet 新互联网》&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在现代计算中，我们容忍长时间的构建，然后是 docker 构建，然后上传到容</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>如何天使投资（2）</title>
    <link href="https://caoyihan.com/2024/07/27/How-to-Angel-Invest2/"/>
    <id>https://caoyihan.com/2024/07/27/How-to-Angel-Invest2/</id>
    <published>2024-07-27T13:11:32.000Z</published>
    <updated>2024-07-27T13:29:27.770Z</updated>
    
    <content type="html"><![CDATA[<p>我不认为自己有资格谈论这个大的话题。这篇文章的主要思想来自 Naval。Naval是著名的风险投资家，他写的《纳瓦尔宝典》也曾风靡于创投圈。</p><h3 id="每个人都觉得自己有着很好的判断力"><a href="#每个人都觉得自己有着很好的判断力" class="headerlink" title="每个人都觉得自己有着很好的判断力"></a>每个人都觉得自己有着很好的判断力</h3><p>心理学上，有「邓宁-克鲁格效应」，指的是一种认知偏差：在特定领域能力有限的人高估了自己的能力。或者说，无能者很难认识到自己的无能。</p><p>这在一定程度上是一种自我防御机制。但也说明，我们很难知道自己有没有好的判断力。</p><p>Naval 认为，<strong>需要5~15年才能知道自己有没有好的判断力，并且需要有一个计划，来长期校准并提高自己的判断力。</strong></p><p>在种子阶段，判断更多的是关于人的判断、产品潜力和市场潜力，而不是你衡量现金流、客户获取成本或病毒式传播指标的能力——因为你没有太多数据。</p><p>而多元化的投资组合，可以理解为对知识匮乏的一种对冲。</p><p>Naval认为，<strong>在天使轮阶段，没有人有足够的信息，能抱有很高的信念，或万无一失的判断</strong>。</p><span id="more"></span><h3 id="判断是您在交易达成之前所做的工作"><a href="#判断是您在交易达成之前所做的工作" class="headerlink" title="判断是您在交易达成之前所做的工作"></a>判断是您在交易达成之前所做的工作</h3><p>随着时间的流逝，我们评估交易需要的数据越来越少。判断不一定是尽职调查，甚至不一定是思考。判断是你在交易到来之前做的准备，这样你的潜意识就可以快速处理它。</p><p><strong>早期投资更多的是直觉，而不是尽职调查</strong>。对早期投资的判断不涉及广泛的尽职调查。是的，检查参考资料、与其他人交谈并仔细考虑是明智的。但这需要几天，而不是几周。随着时间的流逝，您将建立起一种直觉，并且您将需要越来越少的数据来评估交易。（这点其实蛮奇怪。直觉比数据更准。）</p><p><strong>最好的投资者对 FOMO 免疫</strong>（FOMO指错失恐惧）。初创公司现在接受过培训，可以进行紧凑、快速的融资过程。对于从加速器中走出来的初创公司来说尤其如此。他们中的一些人向你施加压力，让你做出决定。最好的投资者对FOMO效应免疫。如果你催促他们在 48 小时内做出决定，他们会说，“好吧，我不会在 48 小时内做出决定，所以这不适合我。他们不会看它，即使这是一笔热门交易。FOMO在一定程度上对许多投资者都有效。我为我考虑的交易采用 24 小时冷静期。即使在我决定投资之后，我也会强迫自己等待 24 小时后再继续前进。（根据我在 Web3 的经验，也感觉 FOMO 是危险的。有时即使投到了，也需要承担较高的价格）</p><h3 id="初创公司随时转向（Pivots）意味着对人的判断力至关重要"><a href="#初创公司随时转向（Pivots）意味着对人的判断力至关重要" class="headerlink" title="初创公司随时转向（Pivots）意味着对人的判断力至关重要"></a>初创公司随时转向（Pivots）意味着对人的判断力至关重要</h3><p>Naval 也认同这种流行的观点：投种子阶段初创公司就是投人。</p><h3 id="优秀的投资者是否与你一起参与这一轮融资？"><a href="#优秀的投资者是否与你一起参与这一轮融资？" class="headerlink" title="优秀的投资者是否与你一起参与这一轮融资？"></a>优秀的投资者是否与你一起参与这一轮融资？</h3><p>当成熟的投资者涌入本轮融资时，这是一个良好判断力的标志</p><h3 id="判断力需要接受不被讨喜"><a href="#判断力需要接受不被讨喜" class="headerlink" title="判断力需要接受不被讨喜"></a>判断力需要接受不被讨喜</h3><p>具有良好判断力的人倾向于在生活的各个方面表现出来。</p><p>他们博览群书，批判性思考，并持有广泛的想法和观点，包括相互冲突的想法和观点。具有良好判断力的人很谦虚，自我意识相对较低，因此他们不会过于执着于早期的决定。他们不断质疑自己</p><p>通常，他们接受过科学或其他技术培训，并在处理现实世界的后果性反馈的行业工作，而不仅仅是人们对他们的看法。</p><p><strong>群体思维导致判断力差</strong>。有良好判断力的人愿意不受欢迎。最清晰的思想家从头开始工作，并在他们的推理中使用第一原则。他们最终依靠自己的权威。还有其他导致判断力变差的事情是，<strong>判断力的过度社会化，以及选择社会或政治上受欢迎的事物</strong>。(Things that lead to poor judgment: groupthink, over-socialization of judgment and picking things because they are politically or socially popular. )（我其实不太清楚，判断力的过度社会化是什么意思。但感觉想要有判断力，就应该多独自思考。很多数学题的答案，也是靠独自思考来的。）</p><blockquote><p>You have to be iconoclastic enough to recognize genius founders without being so low in judgment that you let in all the crazy ones too.<br>你必须足够反传统，才能认出天才的创始人，而不是在判断力上太低，以至于你也让所有疯狂的人都进来。</p><p><strong>Patri Friedman is making weird investments<br>帕特里·弗里德曼（Patri Friedman）正在进行奇怪的投资</strong></p><p>The way portfolios are constructed, you may be better off investing in a lot of crazy deals than a lot of decent looking deals.<br>投资组合的构建方式，您可能最好投资于大量疯狂的交易，而不是大量看起来不错的交易。</p><p>To give a recent example: <a href="https://twitter.com/patrissimo">Patri Friedman</a> started a fund called <a href="https://www.pronomos.vc/">Promonos Capital</a>. He’s investing in experiments in governance: new city states, towns and localities. These are places where people are taking local government into their own hands and doing experiments in governance.<br>举个最近的例子：帕特里·弗里德曼（Patri Friedman）创办了一家名为Promonos Capital的基金。他正在投资治理实验：新的城邦、城镇和地方。在这些地方，人们将地方政府掌握在自己手中，并进行治理实验。</p><p>This seems impossibly difficult to do. The history with <a href="https://www.google.com/search?q=Seasteading&rlz=1C1CHBF_enUS795US795&oq=Seasteading&aqs=chrome..69i57.594j0j7&sourceid=chrome&ie=UTF-8">seasteading</a> in Honduras doesn’t look great. But all you have to do is stumble into the next Singapore or Hong Kong—whether it’s virtual or physical—and you have something that can create trillions of dollars in wealth and change the way people live.<br>这似乎很难做到。洪都拉斯的海上稳定历史看起来并不好。但你所要做的就是偶然进入下一个新加坡或香港——无论是虚拟的还是实体的——你就拥有了可以创造数万亿美元财富并改变人们生活方式的东西。</p><p>Promons benefits from two things. First, they have a unique brand because nobody else is doing that. Everybody interested in this space knows to go to them. Second, the vast majority of their investments are going to look mad—but the few genius outliers should have huge returns because they’re non-consensus investments.<br>Promons从两件事中受益。首先，他们有一个独特的品牌，因为没有其他人这样做。每个对这个领域感兴趣的人都知道要去找他们。其次，他们的绝大多数投资看起来都很疯狂，但少数天才的异常值应该有巨大的回报，因为它们是非共识投资。</p><p>Similarly, <a href="https://foundersfund.com/">Founders Fund</a>, <a href="https://twitter.com/FutureJurvetson">Steve Jurvetson</a> and a variety of other people built their brands by being willing to fund weird deals long before anybody else.<br>同样，Founders Fund、Steve Jurvetson 和其他各种各样的人都愿意在其他人之前很久就为奇怪的交易提供资金，从而建立了自己的品牌。</p></blockquote><h2 id="每笔交易可以有一个致命的缺陷，但不能有太多"><a href="#每笔交易可以有一个致命的缺陷，但不能有太多" class="headerlink" title="每笔交易可以有一个致命的缺陷，但不能有太多"></a>每笔交易可以有一个致命的缺陷，但不能有太多</h2><p>一个打破所有规则的创业公司是一事无成的。你必须用你的判断力来弄清楚创业公司什么时候可以违反规则，什么时候不能。一个遵循所有规则的创业公司可能不会很有趣。一个打破所有规则的创业公司将一事无成，因为他们必须从头开始重塑一切。</p><h3 id="你会在你的赢家身上得到更少的钱"><a href="#你会在你的赢家身上得到更少的钱" class="headerlink" title="你会在你的赢家身上得到更少的钱"></a>你会在你的赢家身上得到更少的钱</h3><p>始终尝试在交易中获得标准的一口大小，而不是一口吃成胖子。你很容易高估自己的判断力。说“我不知道”是完全可以的。大多数时候，这应该是你的答案。只有少数交易你应该说，“我有信念”。而且，即便如此，也要小心你有多少信念。</p><h3 id="不要幻想如果你是创始人，你会做什么"><a href="#不要幻想如果你是创始人，你会做什么" class="headerlink" title="不要幻想如果你是创始人，你会做什么"></a>不要幻想如果你是创始人，你会做什么</h3><p>你不会通过在 TechCrunch 或彭博新闻社上阅读有关技术的信息来成为一名出色的科技投资者。你必须找到源头。您应该毫不犹豫地阅读科学论文和期刊。你应该复习一下你的数学。你应该真正享受学习科学和技术的行为。毕竟，技术是应用科学。</p><h3 id="只投资技术团队"><a href="#只投资技术团队" class="headerlink" title="只投资技术团队"></a>只投资技术团队</h3><p>如果没有技术团队，就等于没有投资技术。</p><blockquote><h2 id="Avoid-Teams-That-Would-Sell-Early-避免那些会提前销售的团队"><a href="#Avoid-Teams-That-Would-Sell-Early-避免那些会提前销售的团队" class="headerlink" title="Avoid Teams That Would Sell Early 避免那些会提前销售的团队"></a>Avoid Teams That Would Sell Early 避免那些会提前销售的团队</h2><p><em>Venture capital is a grand slam business<br>风险投资是一项大满贯业务</em></p><p><strong>Naval:</strong> Angel investing is a game of exceptional outcomes; it’s not a game of averages. You’re better off with a portfolio in which nine out of 10 investments go to zero and the 10th one goes 1,000x, than a portfolio where all of them are 2x or 3x.<br>Naval：天使投资是一场具有非凡结果的游戏;这不是一个平均数的游戏。如果投资组合中 10 项投资中有 9 项为零，第 10 项投资为 1,000 倍，则比所有投资均为 2 倍或 3 倍的投资组合要好。</p><p>If a founding team hints, signals or even just <em>appears</em> likely to sell the company early, it’s a strong negative indicator. Teams that are overly financially motivated often will sell a company for $100M or $200M. That’s a life-changing outcome for them; but it doesn’t matter much to you because you own so little. It’s not going to move the needle on your net worth.<br>如果创始团队暗示、暗示甚至看起来可能会提前出售公司，这是一个强烈的负面指标。过于财务动机的团队通常会以1亿美元或2亿美元的价格出售一家公司。这对他们来说是一个改变生活的结果;但这对你来说并不重要，因为你拥有的太少了。它不会影响你的净资产。</p><p>As Bill Gurley famously said, “<a href="https://www.google.com/search?client=safari&rls=en&q=%E2%80%9Cventure+capital+is+not+even+a+home-run+business;+it%E2%80%99s+a+grand-slam+business.%E2%80%9D&ie=UTF-8&oe=UTF-8">Venture capital is not even a home run business. It’s a grand slam business.</a>” The smart VCs look for extreme outliers.<br>正如比尔·格利（Bill Gurley）的名言：“风险投资甚至不是一种全垒打的业务。这是一项大满贯赛事。聪明的风投会寻找极端的异常值。</p><p>This is why smart VCs let founders sell <a href="https://medium.com/@rizstanford/secondary-sales-in-vc-backed-startups-a-quick-primer-for-entrepreneurs-bdc25ea7f39a">secondaries</a> early on. They take some money off the table in exchange for going for the gold.<br>这就是为什么聪明的风投公司让创始人很早就出售二级市场的原因。他们从桌子上拿走一些钱，以换取黄金。</p><p>When you invest in a company that is going to sell early, you miss out on compounding interest. Also, VCs downstream will read that signal and pass on that deal, and the startup won’t be able to raise the cash they need to become a big company.<br>当你投资一家打算提前出售的公司时，你就错过了复利。此外，下游的风险投资公司将阅读该信号并传递该交易，而初创公司将无法筹集成为大公司所需的现金。</p><p>It’s difficult to pull this signal out of founders, although sometimes they offer it.<br>很难从创始人那里提取出这个信号，尽管有时他们会提供它。</p></blockquote><blockquote><h2 id="‘First-Time-Founders’-Often-Have-Been-Tinkering-for-Quite-a-While-“首次创业者”通常已经修补了很长一段时间"><a href="#‘First-Time-Founders’-Often-Have-Been-Tinkering-for-Quite-a-While-“首次创业者”通常已经修补了很长一段时间" class="headerlink" title="‘First-Time Founders’ Often Have Been Tinkering for Quite a While “首次创业者”通常已经修补了很长一段时间"></a>‘First-Time Founders’ Often Have Been Tinkering for Quite a While “首次创业者”通常已经修补了很长一段时间</h2><p><em>Their ‘first’ startup isn’t always their first startup<br>他们的“第一次”创业并不总是他们的第一次创业</em></p><p><strong>Naval:</strong> There’s a running debate among investors about which is best: first-time founders or repeat founders. There’s no hard and fast answer.<br>Naval：投资者之间一直在争论哪个是最好的：首次创业者还是重复创业者。没有硬性答案。</p><p>I’d argue that most of the value in the industry is probably created by first-time founders. Think of Jeff Bezos, Bill Gates, Larry Page and Sergey Brin, and Mark Zuckerberg: Lightning strikes, things catch fire and the company takes off.<br>我认为，这个行业的大部分价值可能是由首次创业者创造的。想想杰夫·贝佐斯（Jeff Bezos）、比尔·盖茨（Bill Gates）、拉里·佩奇（Larry Page）、谢尔盖·布林（Sergey Brin）和马克·扎克伯格（Mark Zuckerberg）：雷击，事情着火，公司起飞。</p><p><strong>‘First-time founder’ can be misleading<br>“首次创业者”可能会产生误导</strong></p><p>Though, the label “first-time founder” doesn’t really apply to some of these. Zuckerberg had other projects before Facebook took off. Gates founded <a href="https://en.wikipedia.org/wiki/Traf-O-Data">Traf-O-Data</a> with Paul Allen long before they did Microsoft. They measured traffic and sold the data to cities.<br>不过，“首次创始人”这个标签并不适用于其中一些。在Facebook起飞之前，扎克伯格还有其他项目。盖茨与保罗·艾伦（Paul Allen）一起创立了Traf-O-Data，早在他们做Microsoft之前。他们测量了交通流量，并将数据出售给城市。</p><p>Often, a so-called “first-time founder” has been tinkering for quite a while.<br>通常，一个所谓的“首次创始人”已经修补了很长一段时间。</p><p><strong>Repeat founders tend to be better at execution<br>重复创业者往往更善于执行</strong></p><p>Repeat founders also can be extremely successful. Look at Uber, WhatsApp and Zoom.<br>重复的创始人也可以非常成功。看看 Uber、WhatsApp 和 Zoom。</p><p>Repeat founders tend to be much better at execution. They’re good at recruiting teams and generally more careful about what markets they enter. Repeat founders also have better connections, which makes fundraising easier.<br>重复创业者往往更善于执行。他们擅长招募团队，并且通常对他们进入的市场更加谨慎。重复的创始人也有更好的人脉，这使得筹款更容易。</p><p>Because repeat founders have been around, they’re more likely to have established long-term relationships with people you know, making it easier to check their reputation and whether they have integrity.<br>因为重复的创始人一直在身边，所以他们更有可能与你认识的人建立了长期的关系，从而更容易检查他们的声誉和他们是否诚信。</p><p><strong>Repeat founders tend to be less passionate<br>重复创业者往往不那么热情</strong></p><p>On the other hand, repeat founders tend to be less passionate. They surveyed the market and picked what they think is going to work—not necessarily what they’re super excited about.<br>另一方面，重复创业者往往不那么热情。他们调查了市场，并选择了他们认为会起作用的，而不一定是他们超级兴奋的东西。</p><p>They tend to have less <a href="https://nav.al/specific-knowledge">specific knowledge</a> about the field because they haven’t been buried in it for the last 20 years; although you sometimes get that specific knowledge with founders coming from bigger companies who incubated a technology they really like.<br>他们往往对这个领域没有那么具体的了解，因为他们在过去的 20 年里还没有被埋没在这个领域;尽管您有时会从来自大公司的创始人那里获得这些特定知识，他们孵化了他们真正喜欢的技术。</p><p>Deals with repeat founders tend to be more expensive, so your returns are lower. There are tradeoffs. I don’t have a hard and fast rule like “don’t back repeat founders” or “don’t back first-time founders.” I find both can work, and both can <em>not</em> work.<br>与重复创始人的交易往往更昂贵，因此您的回报较低。这是有取舍的。我没有像“不要支持重复创业者”或“不要支持首次创业者”这样的硬性规定。我发现两者都可以工作，但两者都不能工作。</p><h2 id="Repeat-Founders-Don’t-Really-Want-to-Start-Over-From-Scratch-重复创业者真的不想从头开始"><a href="#Repeat-Founders-Don’t-Really-Want-to-Start-Over-From-Scratch-重复创业者真的不想从头开始" class="headerlink" title="Repeat Founders Don’t Really Want to Start Over From Scratch 重复创业者真的不想从头开始"></a>Repeat Founders Don’t Really Want to Start Over From Scratch 重复创业者真的不想从头开始</h2><p><em>Test repeat founders for passion<br>测试重复创业者的激情</em></p><p><strong>Naval:</strong> With first-time founders, you must test their ability to learn. Are they fast learners? Will they learn how to run a company? Will they adapt and grow?<br>Naval：对于首次创业者，你必须测试他们的学习能力。他们学得很快吗？他们会学习如何经营公司吗？他们会适应和成长吗？</p><p>This is different than asking: “Are they coachable?” I believe <a href="https://spearhead.co/coachability">coachability is overrated</a>.<br>这与问：“他们是可指导的吗？我认为可教练性被高估了。</p><p><strong>Test repeat founders for passion<br>测试重复创业者的激情</strong></p><p>With repeat founders, you should test for passion. When the going gets tough, will they see the company all the way through—or will they go start the next thing? Do they have conviction? Do they have the humility to go through it again, starting from scratch?<br>对于重复的创始人，你应该测试激情。当事情变得艰难时，他们会看到公司的整个过程，还是会开始下一件事？他们有信念吗？他们有谦卑的态度再次经历它，从头开始吗？</p><p>Repeat founders often don’t want to start over with four or five people crammed into a tiny space behind wooden desks. They want to start with a lot of money, a big bang, a big office and a big team.<br>重复创业者通常不想让四五个人挤在木桌后面的狭小空间里重新开始。他们想从很多钱开始，大爆炸，一个大办公室和一个大团队。</p><p>That can work when there’s mostly <em>execution</em> risk, which is often the case in enterprise sales and software. It doesn’t work as well when there’s <em>invention</em> risk, which is the case with consumer, social networks and deep technology development.<br>这在主要存在执行风险的情况下是可行的，这在企业销售和软件中通常是这种情况。当存在发明风险时，它就不那么有效了，消费者、社交网络和深度技术开发就是这种情况。</p><p><strong>First-time founders take on market risk<br>首次创业者承担市场风险</strong></p><p><strong>Nivi:</strong> So, first-time founders take on market risk, which explains why they tend to have the biggest outcomes. It also explains why most of them fail. While repeat founders take on execution risk, which explains why they deliver more consistent results. It also explains why the returns aren’t huge: They’re not betting on a market insight.<br>Nivi：所以，首次创业者会承担市场风险，这就解释了为什么他们往往会取得最大的成果。这也解释了为什么他们中的大多数都失败了。虽然重复的创始人承担了执行风险，但这解释了为什么他们会提供更一致的结果。这也解释了为什么回报并不高：他们没有押注市场洞察力。</p><p><strong>Naval:</strong> That’s a deep way of summarizing it. First-time founders take on market risk and create new markets as a result—or own entire markets—and repeat founders take on execution risk.<br>Naval：这是一种深刻的总结方式。首次创业者承担市场风险并因此创造新市场，或者拥有整个市场，而重复创业者则承担执行风险。</p><p>There are also some blends. For example, when you’re developing a new technology, it can create a new market. That requires deep expertise, which favors a first-time founder. But it also requires raising lots of money and addressing things like manufacturability and distribution of something new, which might require a repeat founder’s resources.<br>也有一些混合物。例如，当你在开发一项新技术时，它可以创造一个新的市场。这需要深厚的专业知识，这有利于首次创业者。但它也需要筹集大量资金，并解决诸如可制造性和新事物的分配等问题，这可能需要重复创始人的资源。</p><p>Sometimes a sweet spot emerges: a repeat founder with previous success that wasn’t so big that they lost their first-time founder mentality.<br>有时，一个甜蜜点会出现：一个重复的创始人，以前的成功并没有那么大，以至于他们失去了第一次创始人的心态。</p><p>Let’s say you have a team of people that builds robots. They failed because they were too early and the market wasn’t quite ready. But they made a good attempt, and they did it with little money.<br>假设你有一个制造机器人的团队。他们失败了，因为他们为时过早，市场还没有完全准备好。 但是他们做了一个很好的尝试，他们用很少的钱做到了。</p><p>The team comes back later and still wants to build robots. They tell you the timing is finally right and they’ve brought on a few younger people with access to new technology. Now they’re in a position to raise more money—and they’ve got a big chip on their shoulder, determined to prove this space can work. Those kinds of bets can be very interesting.<br>团队后来回来了，仍然想制造机器人。他们告诉你，时机终于到了，他们已经带来了一些可以使用新技术的年轻人。现在，他们有能力筹集更多的资金，而且他们的肩膀上有一个很大的筹码，决心证明这个领域可以发挥作用。这些类型的赌注可能非常有趣。</p></blockquote><p>这里关于初次创业和持续创业的说法很有趣。持续创业者，可能执行得更好。但初次创业者，或许更有激情。</p><p>参考资料：<a href="https://nav.al/angel-2">https://nav.al/angel-2</a></p><p><a href="https://nav.al/angel-1">https://nav.al/angel-1</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我不认为自己有资格谈论这个大的话题。这篇文章的主要思想来自 Naval。Naval是著名的风险投资家，他写的《纳瓦尔宝典》也曾风靡于创投圈。&lt;/p&gt;
&lt;h3 id=&quot;每个人都觉得自己有着很好的判断力&quot;&gt;&lt;a href=&quot;#每个人都觉得自己有着很好的判断力&quot; class=&quot;headerlink&quot; title=&quot;每个人都觉得自己有着很好的判断力&quot;&gt;&lt;/a&gt;每个人都觉得自己有着很好的判断力&lt;/h3&gt;&lt;p&gt;心理学上，有「邓宁-克鲁格效应」，指的是一种认知偏差：在特定领域能力有限的人高估了自己的能力。或者说，无能者很难认识到自己的无能。&lt;/p&gt;
&lt;p&gt;这在一定程度上是一种自我防御机制。但也说明，我们很难知道自己有没有好的判断力。&lt;/p&gt;
&lt;p&gt;Naval 认为，&lt;strong&gt;需要5~15年才能知道自己有没有好的判断力，并且需要有一个计划，来长期校准并提高自己的判断力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在种子阶段，判断更多的是关于人的判断、产品潜力和市场潜力，而不是你衡量现金流、客户获取成本或病毒式传播指标的能力——因为你没有太多数据。&lt;/p&gt;
&lt;p&gt;而多元化的投资组合，可以理解为对知识匮乏的一种对冲。&lt;/p&gt;
&lt;p&gt;Naval认为，&lt;strong&gt;在天使轮阶段，没有人有足够的信息，能抱有很高的信念，或万无一失的判断&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>博客、小红书和即刻</title>
    <link href="https://caoyihan.com/2024/07/25/Blogs-Little-Red-Book-And-Jike/"/>
    <id>https://caoyihan.com/2024/07/25/Blogs-Little-Red-Book-And-Jike/</id>
    <published>2024-07-25T13:56:04.000Z</published>
    <updated>2024-07-28T03:50:36.186Z</updated>
    
    <content type="html"><![CDATA[<p>最近在同时运营博客、小红书和即刻。</p><p>我发现只要发小红书，就不可避免地陷入流量逻辑。Utility（效用）不可避免地变成点赞、收藏和浏览次数。在这种情况下，似乎会渐渐偏离自己分享的初心，而去关注读者喜欢阅读什么样的内容，自己创作什么样的内容会获得更好的数据，然后根据读者的喜好来创作。也似乎不可避免地为了保持更新频率，而输出一些质量一般般的内容。发到最后，自己也感觉自己创作的内容很没有营养。</p><p>而且小红书也不是一个适合沉淀的平台。很多纯文字的想法并没有合适的配图。而且早期的内容，读者点进主页之后，也需要下划很久才能找到。</p><p>最近读到<a href="https://mpmisko.github.io/2024/wtf-happened-to-blogs/">《WTF happened to blogs 博客怎么了》</a>：「Blogs are raw, unfiltered windows into someone’s mind.博客是进入某人原始的、未经过滤的思想的窗口。」至少我现在发博客，不会有流量焦虑。Plausible（一个流量分析工具）过期后，更不会每天都去查看访问量。在这样的心态下，反而感觉能写出一些更真实，更值得阅读的内容，沉淀得也会更有深度一点。</p><p>或许，我下一篇文章就应该写《小红书创作者应该如何避免流量焦虑》。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在同时运营博客、小红书和即刻。&lt;/p&gt;
&lt;p&gt;我发现只要发小红书，就不可避免地陷入流量逻辑。Utility（效用）不可避免地变成点赞、收藏和浏览次数。在这种情况下，似乎会渐渐偏离自己分享的初心，而去关注读者喜欢阅读什么样的内容，自己创作什么样的内容会获得更好的数据，然后</summary>
      
    
    
    
    
  </entry>
  
</feed>
